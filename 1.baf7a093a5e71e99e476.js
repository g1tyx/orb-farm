(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[,function(e,n,t){"use strict";t.r(n);var o=t(2),i=t(11);t(40);function a(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var r=t(24),c=t(39);window.memory=i.e;var s=t(57),l=t(30),u=function(e){var n,t=e.canvas,o=e.universe,a=e.isSnapshot,c=void 0!==a&&a,u=e.gl;n=r(u?{gl:u,attributes:{preserveDrawingBuffer:c}}:{canvas:t,attributes:{preserveDrawingBuffer:c}});var h=o.width(),m=o.height(),f=o.cells(),p=o.lights(),d=o.sprite(),v=new Uint8Array(i.e.buffer,f,h*m*4),x=new Uint8Array(i.e.buffer,p,h*m*4),y=new Uint8Array(i.e.buffer,d,h*m*4),g=n.texture({width:h,height:m,data:v}),w=n.texture({width:h,height:m,data:x}),b=n.texture({width:h,height:m,data:y}),k=n({blend:{enable:!0,func:{srcRGB:"src alpha",srcAlpha:1,dstRGB:"one minus src alpha",dstAlpha:1},equation:{rgb:"add",alpha:"add"},color:[0,0,0,0]},frag:s,uniforms:{t:function(e){return e.tick},dataTexture:function(){return f=o.cells(),v=new Uint8Array(i.e.buffer,f,h*m*4),g({width:h,height:m,data:v})},lightTexture:function(){return p=o.lights(),x=new Uint8Array(i.e.buffer,p,h*m*4),w({width:h,height:m,data:x})},spriteTexture:function(){return d=o.sprite(),y=new Uint8Array(i.e.buffer,d,h*m*4),b({width:h,height:m,data:y})},resolution:function(e){return[e.viewportWidth,e.viewportHeight]},dpi:4,isSnapshot:c},vert:l,attributes:{position:[[-1,4],[-1,-1],[4,-1]]},count:3});return{regl:n,draw:function(){n.poll(),k()}}},h=t(24),m=t(58),f=t(30),p=(document.getElementById("plot-label"),0),d=0,v=new Uint8Array(180),x=0;function y(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var g=new(function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.fps=document.getElementById("fps"),this.frames=[],this.lastFrameTimeStamp=performance.now()}var n,t,o;return n=e,(t=[{key:"render",value:function(){var e=performance.now(),n=e-this.lastFrameTimeStamp;this.lastFrameTimeStamp=e;var t=1/n*1e3;this.frames.push(t),this.frames.length>30&&this.frames.shift();for(var o=1/0,i=-1/0,a=0,r=0;r<this.frames.length;r++)a+=this.frames[r],o=Math.min(this.frames[r],o),i=Math.max(this.frames[r],i);var c=a/this.frames.length;this.fps.textContent="FPS:".concat(Math.round(c))}}])&&y(n.prototype,t),o&&y(n,o),e}()),w=t(59),b=t.n(w);var k,E=(k=t(66)).keys().map(k);var z,S=function(e){return fetch(e).then((function(e){if(!e.ok)throw Error(e.statusText);return e.arrayBuffer()})).then((function(n){return b.a.parse(n).catch((function(n){console.log(n+e)}))})).then((function(e){var n=e[0];return e.push(n),n}))};function _(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function A(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var t=[],o=!0,i=!1,a=void 0;try{for(var r,c=e[Symbol.iterator]();!(o=(r=c.next()).done)&&(t.push(r.value),!n||t.length!==n);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==c.return||c.return()}finally{if(i)throw a}}return t}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var R=document.getElementById("sand-canvas"),D=function(e,n){return Math.sqrt(Math.pow(e.clientX-n.clientX,2)+Math.pow(e.clientY-n.clientY,2),2)},C=function(e){var n=function(e){return Math.sqrt(Math.pow(e.clientX,2)+Math.pow(e.clientY,2),2)}(e);return{clientX:e.clientX/n,clientY:e.clientY/n}},T=function(e,n){return{clientX:e.clientX*n,clientY:e.clientY*n}},I=function(e,n){return{clientX:e.clientX+n.clientX,clientY:e.clientY+n.clientY}},M=function(e,n){return{clientX:e.clientX-n.clientX,clientY:e.clientY-n.clientY}},L=!1,P=null,U=null;function F(e){var n=window.UI.state.selectedTchotchke;if(n){window.UI.setState((function(e){var t=e.tchotchkes;return t.delete(n),document.documentElement.style.cursor="default",{tchotchkes:t,selectedTchotchke:null}}));var t=A(G(e),2),o=t[0],i=t[1];return S(n).then((function(e){ge.place_sprite(o-8,i-8,e.data),window.UI.upload()})),!0}return!1}function O(e){clearInterval(U),U=window.setInterval((function(){return j(e)}),100);var n={clientX:e.clientX,clientY:e.clientY};if(L){var t=B[window.UI.state.selectedElement]||2,i=0;if(j(n),P&&window.UI.state.selectedElement!=o.a.Fish&&window.UI.state.selectedElement!=o.a.GoldFish)for(;D(n,P)>t/3;){var a=D(n,P);if(n=I(n,T(C(M(P,e)),Math.min(t/3,a))),++i>1e3)break;j(n)}P=e}}R.addEventListener("mousedown",(function(e){e.preventDefault(),F(e)||(ge.push_undo(),L=!0,clearInterval(U),U=window.setInterval((function(){return j(e)}),100),j(e),P=e)})),document.body.addEventListener("mouseup",(function(e){clearInterval(U),L&&(e.preventDefault(),P=null,L=!1)})),R.addEventListener("mousemove",(function(e){clearInterval(U),O(e)})),R.addEventListener("mouseleave",(function(e){clearInterval(U),P=null})),R.addEventListener("touchstart",(function(e){e.cancelable&&e.preventDefault(),F(Array.from(e.touches)[0])||(ge.push_undo(),L=!0,P=e,N(e))})),R.addEventListener("touchend",(function(e){e.cancelable&&e.preventDefault(),P=null,L=!1,clearInterval(U)})),R.addEventListener("touchmove",(function(e){window.paused||e.cancelable&&e.preventDefault(),clearInterval(U),N(e)}));var N=function(e){var n=Array.from(e.touches);1==n.length?O(n[0]):n.forEach(j)},B=(_(z={},o.a.Water,13),_(z,o.a.Sand,8),_(z,o.a.Air,7),_(z,o.a.Algae,2),_(z,o.a.Fish,2),_(z,o.a.GoldFish,2),_(z,o.a.Daphnia,2),_(z,o.a.Zoop,2),_(z,o.a.Seed,2),_(z,o.a.Bacteria,2),z);function G(e){var n=R.getBoundingClientRect(),t=R.width/(be*Math.ceil(window.devicePixelRatio))/n.width,o=R.height/(be*Math.ceil(window.devicePixelRatio))/n.height,i=(e.clientX-n.left)*t,a=(e.clientY-n.top)*o;return[Math.min(Math.floor(i),ke-1),Math.min(Math.floor(a),Ee-1)]}var j=function(e){if(L){var n=A(G(e),2),t=n[0],o=n[1];if(!(window.UI.state.selectedElement<0)){var i=B[window.UI.state.selectedElement]||3;ge.paint(t,o,i,window.UI.state.selectedElement)}}},X=t(3),q=t.n(X),Y=t(183),H=t.n(Y),V=t(19),W=t(23),K=t(32),J=t.n(K),Z=(t(33),t(34),function(){return q.a.createElement("div",{className:"Info"},q.a.createElement("h1",null,"A sealed ecosystem simulation "),q.a.createElement("hr",null),q.a.createElement("hr",null),q.a.createElement("p",null,"Welcome to orb.farm! This is a virtual ecosystem where different species of creature can live, grow and die as part of a self-contained food chain. Please play, explore, and observe!"),q.a.createElement("p",null,"Created by ",q.a.createElement("a",{href:"https://maxbittker.com"},"max bittker")),q.a.createElement("p",null,"Source code & Bug reports:"," ",q.a.createElement("a",{href:"https://github.com/MaxBittker/jar"},"github.com/maxbittker/jar")),q.a.createElement("p",null,"See also: ",q.a.createElement("a",{href:"https://sandspiel.club"},"sandspiel.club"))," ",q.a.createElement("hr",null),q.a.createElement("hr",null),q.a.createElement("div",{className:"species-info"},q.a.createElement("span",null,q.a.createElement("h1",null,"Air:"),q.a.createElement("p",null,"Mostly used to erase things."),q.a.createElement("hr",null)),q.a.createElement("span",null,q.a.createElement("h1",null,"Glass:"),q.a.createElement("p",null,"Lets in light, seals in flavor."),q.a.createElement("hr",null)),q.a.createElement("span",null,q.a.createElement("h1",null,"Sand:"),q.a.createElement("p",null,"Important nutrient vector for plants. Plant seeds in this."),q.a.createElement("hr",null)),q.a.createElement("span",null,q.a.createElement("h1",null,"Stone:"),q.a.createElement("p",null,"Draw archways and castle. Aquascaping is a noble cause."),q.a.createElement("hr",null)),q.a.createElement("span",null,q.a.createElement("h1",null,"Wood:"),q.a.createElement("p",null,"Driftwood adds natural decorative flare and provides a place for fish to hide.")),q.a.createElement("hr",null),q.a.createElement("span",null,q.a.createElement("h1",null,"Water:"),q.a.createElement("p",null,"A classic. Doesn't get better than this."),q.a.createElement("hr",null)),q.a.createElement("span",null,q.a.createElement("h1",null,"Algae:"),q.a.createElement("p",null,"Photosynthesizes sunlight to produce nutrients and oxygen. Life of the party!")),q.a.createElement("hr",null),q.a.createElement("span",null,q.a.createElement("h1",null,"Daphnia:"),q.a.createElement("p",null,"Also know as water fleas, these freshwater zooplankton are important parts of the ecosystem. They feed on algae and lay eggs! More active at night."),q.a.createElement("hr",null)),q.a.createElement("span",null,q.a.createElement("h1",null,"Seed:"),q.a.createElement("p",null,"Grows into eel grass, which is a source of food and oxygen. Needs to pull nutrients from sand in order to grow!"),q.a.createElement("hr",null)),q.a.createElement("span",null,q.a.createElement("h1",null,"Bacteria:"),q.a.createElement("p",null,"Helps break down waste into fertilizer. Decomposers are very important parts to a functioning ecosystem. Blows bubbles when happy."),q.a.createElement("hr",null)),q.a.createElement("span",null,q.a.createElement("h1",null,"Fish:"),q.a.createElement("p",null,"They feed mostly on daphnia but will also feed on the biofilm that grows on plants. I can't tell what they're thinking."),q.a.createElement("hr",null)),q.a.createElement("span",null,q.a.createElement("h1",null,"Gold Fish:"),q.a.createElement("p",null,"Loyal but simple minded."))),q.a.createElement("hr",null),q.a.createElement("h1",null," Credits:"),q.a.createElement("p",null,"Daphnia Art:"," ",q.a.createElement("a",{href:"https://twitter.com/aconfuseddragon"},"aconfuseddragon")),q.a.createElement("p",null,"Font: PixelMix by Andrew Tyler"),q.a.createElement("p",null,"Background Art:",q.a.createElement("a",{href:"https://www.shadertoy.com/view/tdSXzD"},'"The sun, the sky and the clouds"')," ","by stilltravelling"),q.a.createElement("p",null,q.a.createElement("img",{src:"https://camo.githubusercontent.com/93105325a463894a90f70acf42eb79761f85567e/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f642f64642f466f6f6457656253696d706c652e6a70672f37323170782d466f6f6457656253696d706c652e6a7067"})))}),Q=function(e){var n=e.close,t=e.children;return q.a.createElement("div",{className:"welcome-scrim"},q.a.createElement("div",{id:"welcome"},t,q.a.createElement(V.b,{to:"/",className:"x",onClick:n},q.a.createElement("button",null," x"))))},$=t(195),ee=t.n($);function ne(e){return(ne="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function te(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function oe(e){return(oe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ie(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ae(e,n){return(ae=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var re=["FishTail","Biofilm","GoldFishTail"];re.push("Bubble"),re.push("Plant"),re.push("Zoop"),re.push("Nitrogen"),re.push("Plastic"),window.species=o.a;var ce=function(){var e=document.createElement("canvas"),n=Object.values(o.a),t=Math.max.apply(Math,a(n))+1,i=o.b.new(t,1);e.width=t,e.height=3,i.reset(),n.forEach((function(e){return i.paint(e,0,2,e)})),i.paint(n.Air,0,2,n.Air),(0,u({universe:i,canvas:e,isSnapshot:!0}).draw)();var r=e.getContext("webgl"),c=new Uint8Array(4*t);r.readPixels(0,0,t,1,r.RGBA,r.UNSIGNED_BYTE,c);var s={};return n.forEach((function(e){var n=4*e,t="rgba(".concat(c[n],",").concat(c[n+1],", ").concat(c[n+2],", 1.0)");s[e]=t})),s}();function se(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;return e+Math.random()*e*2}function le(){return"\n  ".concat(se(),"px\n  ").concat(se(),"px\n  ").concat(se(),"px\n  ").concat(se(),"px\n  /\n  ").concat(se(),"px\n  ").concat(se(),"px\n  ").concat(se(),"px\n  ").concat(se(),"px\n  ")}var ue=function(e){var n=e.onClick,t=e.className,o=e.children;return q.a.createElement("button",{onClick:n,className:t,style:{borderRadius:le()}},o)},he=function(e,n,t){var i=o.a[e],a=ce[i];i==o.a.Daphnia&&(a=ce[o.a.Zoop]);var r=i==n;return q.a.createElement("button",{className:r?"selected":"",key:e,onClick:function(){t(i)},style:{background:"inherit",backgroundColor:a,borderRadius:le(),filter:r||"saturate(0.4) "}},"  ",e,"  ")},me=function(e){function n(e){var t,i,a;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),i=this,t=!(a=oe(n).call(this,e))||"object"!==ne(a)&&"function"!=typeof a?ie(i):a;var r=localStorage.getItem("tutorialProgress")||0;return t.state={submissionMenuOpen:!1,paused:!1,ff:!1,submitting:!1,size:1,tchotchkes:new Set,dataURL:null,currentSubmission:null,selectedElement:o.a.Sand,tutorialProgress:r},window.UI=ie(t),window.setTimeout((function(){}),1e4),t}var t,r,s;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&ae(e,n)}(n,e),t=n,(r=[{key:"componentDidUpdate",value:function(e){}},{key:"togglePause",value:function(){window.paused=!this.state.paused,this.setState({paused:!this.state.paused})}},{key:"toggleFF",value:function(){window.ff=!this.state.ff,this.setState({ff:!this.state.ff})}},{key:"play",value:function(){window.paused=!1,this.setState({paused:!1})}},{key:"pause",value:function(){window.paused=!0,this.setState({paused:!0})}},{key:"setSize",value:function(e,n){e.preventDefault(),this.setState({size:n})}},{key:"reset",value:function(){window.confirm("Reset your ecosystem?")&&(this.play(),this.setState({currentSubmission:null}),localStorage.setItem("last_tchotchke",null),Xe())}},{key:"closeMenu",value:function(){this.play(),this.setState({dataURL:null})}},{key:"upload",value:function(){console.log("saving");var e=new Uint8Array(i.e.buffer,ge.cells(),ke*Ee*4),n=document.createElement("canvas"),t=n.getContext("2d"),o=t.createImageData(ke,Ee);n.height=Ee,n.width=ke;for(var a=0;a<ke*Ee*4;a++)o.data[a]=a%4==3?255:e[a];t.putImageData(o,0,0);var r=n.toDataURL("image/png"),c=JSON.stringify(r);try{localStorage.setItem("cell_data",c),localStorage.setItem("o2",ge.o2()),localStorage.setItem("time",window.t)}catch(e){console.log("store failed")}var s=new Uint8Array(i.e.buffer,ge.sprite(),ke*Ee*4);for(a=0;a<ke*Ee*4;a++)o.data[a]=s[a];t.putImageData(o,0,0);var l=n.toDataURL("image/png"),u=JSON.stringify(l);try{localStorage.setItem("sprite_data",u)}catch(e){console.log("store failed")}}},{key:"currentDateString",value:function(){var e=new Date;return"".concat(e.getMonth(),"-").concat(e.getDate())}},{key:"findTchotchke",value:function(){var e=this;localStorage.getItem("last_tchotchke")!=this.currentDateString()&&(this.state.tchotchkes.size>=2||this.setState((function(n){var t,o=n.tchotchkes;return localStorage.setItem("last_tchotchke",e.currentDateString()),{tchotchkes:o.add((t=Math.random()*E.length,E[0|t]))}})))}},{key:"load",value:function(){var e=this;console.log("loading"),window.setInterval((function(){return e.findTchotchke()}),24e4);var n=JSON.parse(localStorage.getItem("cell_data")),t=JSON.parse(localStorage.getItem("sprite_data"));if(!n)return console.log("no save"),void window.setInterval((function(){return e.upload()}),1e4);var o=document.createElement("canvas");o.width=ke,o.height=Ee;var a=o.getContext("2d"),r=new Image;r.src=n,r.onload=function(){a.drawImage(r,0,0);for(var n=a.getImageData(0,0,o.width,o.height),t=new Uint8Array(i.e.buffer,ge.cells(),ke*Ee*4),c=0;c<ke*Ee*4;c++)t[c]=n.data[c];if(localStorage.getItem("o2")){var s=parseInt(localStorage.getItem("o2"),10);ge.set_o2(s)}window.setInterval((function(){return e.upload()}),1e4)};var c=document.createElement("canvas");c.width=ke,c.height=Ee;var s=c.getContext("2d"),l=new Image;l.src=t,l.onload=function(){s.drawImage(l,0,0);for(var e=s.getImageData(0,0,c.width,c.height),n=new Uint8Array(i.e.buffer,ge.sprite(),ke*Ee*4),t=0;t<ke*Ee*4;t++)n[t]=e.data[t]}}},{key:"render",value:function(){var e=this,n=this.state,t=n.ff,i=n.selectedElement,r=n.currentSubmission,s=n.selectedTchotchke,l=n.tchotchkes,h=n.tutorialProgress,m=r&&r.id?"#".concat(r.id):"",f=Object.keys(o.a).filter((function(e){return!re.includes(e)}));return q.a.createElement("div",{id:"HUD",className:"fade"},q.a.createElement(ue,{onClick:function(){return e.toggleFF()},className:t?"selected":""},q.a.createElement("svg",{height:"20",width:"20",id:"d",viewBox:"0 0 300 300"},q.a.createElement("polygon",{id:"play",points:"0,50 , 150,150 0,250"}),q.a.createElement("polygon",{id:"play",points:"150,50, 300,150 150,250"}))),q.a.createElement(ue,{onClick:function(){return e.reset()}},"Reset"),q.a.createElement(V.b,{to:{pathname:"/info/",hash:m}},q.a.createElement(ue,null,"info")),q.a.createElement(ue,{onClick:function(){!function(e,n){window.paused=!0;var t=document.createElement("canvas");t.width=2*e.width(),t.height=2*e.height();var o=t.width,i=t.height,r=new c({workers:2,quality:10,width:t.width,height:t.height,transparent:"rgba(0,0,0,0)"}),s=[],l=document.createElement("canvas");l.width=o,l.height=i;var h=l.getContext("2d");s=[],t.width,t.height;for(var m=window.t,f=0;f<20;f++){e.set_time(m/50%255),m+=5,e.tick(),(t=document.createElement("canvas")).width=2*e.width(),t.height=2*e.height();var p=t.width,d=t.height,v=u({universe:e,canvas:t,isSnapshot:!1});v.regl,(0,v.draw)(),console.log("adding frame "+f),h.clearRect(0,0,p,d),h.drawImage(t,0,0);var x=h.getImageData(0,0,p,d);s.push(x)}s=[].concat(a(s),a(s.slice(0).reverse()));var y=!0,g=!1,w=void 0;try{for(var b,k=s[Symbol.iterator]();!(y=(b=k.next()).done);y=!0){var E=b.value;r.addFrame(E,{delay:16})}}catch(e){g=!0,w=e}finally{try{y||null==k.return||k.return()}finally{if(g)throw w}}r.on("finished",(function(e){n(URL.createObjectURL(e))})),r.render(),window.paused=!1}(ge,(function(n){e.pause(),e.setState({dataURL:n})}))}},"📷"),f.map((function(n){return he(n,s||i,(function(n){return e.setState({selectedElement:n,selectedTchotchke:null})}))})),l.size>0&&q.a.createElement("span",{className:"tchotchkes"},Array.from(l).map((function(n){return q.a.createElement("img",{onClick:function(){document.documentElement.style.cursor='url("'.concat(n,'"), default'),e.setState({selectedTchotchke:n})},className:s==n?"selected":"",src:n,key:n})}))),s&&q.a.createElement("div",{className:"discard",onClick:function(){window.UI.setState((function(e){var n=e.tchotchkes;return n.delete(s),{tchotchkes:n,selectedTchotchke:null}}))}},"Discard"),this.state.dataURL&&q.a.createElement(Q,{close:function(){return e.closeMenu()}},q.a.createElement("h4",null,"~~~Share your Orb!~~~~"),q.a.createElement("img",{src:this.state.dataURL,className:"submissionImg"}),q.a.createElement("h4",null,"Orb.Farm"),q.a.createElement("h4",null,"Tell your friends!"),q.a.createElement("div",{style:{display:"flex"}})),h<4&&q.a.createElement(q.a.Fragment,null,q.a.createElement("div",{className:"welcome-scrim"}),q.a.createElement("div",{id:"welcome"},q.a.createElement("div",{className:"welcome-right-column"},q.a.createElement("div",{className:"welcome-speech"},[q.a.createElement("span",null,q.a.createElement("h1",null,"Welcome to Orb.Farm!")," ",q.a.createElement("p",null,"This is your personal aquatic ecosystem to sculpt, nurture, and observe.")),q.a.createElement("p",null,"My advice? Start with the basics. Fill your tank with"," ",he("Sand",null,(function(){}))," and"," ",he("Water",null,(function(){})),". Or vice versa!"),q.a.createElement("p",null,"From there, introduce lifeforms such as adorable"," ",he("Daphnia",null,(function(){}))," — just don't forget some tasty"," ",he("Algae",null,(function(){}))," for us to eat when we hatch."),q.a.createElement("span",null,q.a.createElement("p",null,"Balance the needs of your ecosystem to achieve a stable Orb community."),q.a.createElement("h1",null,"And have fun!")," ")][h])),q.a.createElement("img",{id:"daphnia",src:ee.a}),q.a.createElement("span",null,q.a.createElement("img",{id:"bubblebig",src:J.a}),q.a.createElement("h4",{id:"welcome-progress"},h+1,"/4"),q.a.createElement(ue,{className:"next-button",onClick:function(){e.setState({tutorialProgress:h+1}),3==h&&localStorage.setItem("tutorialProgress",4)}},h<3?"Next >":"Begin!")))))}}])&&te(t.prototype,r),s&&te(t,s),n}(q.a.Component);H.a.render(q.a.createElement((function(){return q.a.createElement(V.a,null,q.a.createElement(W.a,{path:"/",component:me}),q.a.createElement(W.a,{exact:!0,path:"/info/",component:function(){return q.a.createElement(Q,null,q.a.createElement(Z,null))}}))}),null),document.getElementById("ui"));t(196);function fe(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var pe=t(197),de=function(){function e(n,t){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.canvas=document.getElementById(n);var o={stencil:!1,premultipliedAlpha:!1},i=null;null==i&&(i=this.canvas.getContext("webgl2",o)),null==i&&(i=this.canvas.getContext("experimental-webgl2",o)),null==i&&(i=this.canvas.getContext("webgl",o)),null==i&&(i=this.canvas.getContext("experimental-webgl",o)),this.gl=i,this.textures={};var a=!(this.gl instanceof WebGLRenderingContext),r="";r+=a?"#version 300 es\n#ifdef GL_ES\nprecision highp float;\nprecision highp int;\nprecision mediump sampler3D;\n#endif\nin ":"#ifdef GL_ES\nprecision highp float;\nprecision highp int;\n#endif\nattribute",r+=" vec4 aPosition; void main() { gl_Position = aPosition; } ";var c,s,l="";a?(c=!0,s=!0):(c=this.gl.getExtension("OES_standard_derivatives"),s=this.gl.getExtension("EXT_shader_texture_lod")),a?(l+="#version 300 es\n#ifdef GL_ES\nprecision highp float;\nprecision highp int;\nprecision mediump sampler3D;\n#endif\nout vec4 myOutputColor;\n",pe=pe.replace("gl_FragColor","myOutputColor")):(c&&(l+="#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n#endif\n"),s&&(l+="#extension GL_EXT_shader_texture_lod : enable\n"),l+="#ifdef GL_ES\nprecision highp float;\nprecision highp int;\n#endif\nvec4 texture(     sampler2D   s, vec2 c)                   { return texture2D(s,c); }\nvec4 texture(     sampler2D   s, vec2 c, float b)          { return texture2D(s,c,b); }\nvec4 texture(     samplerCube s, vec3 c )                  { return textureCube(s,c); }\nvec4 texture(     samplerCube s, vec3 c, float b)          { return textureCube(s,c,b); }\nfloat round( float x ) { return floor(x+0.5); }\nvec2 round(vec2 x) { return floor(x + 0.5); }\nvec3 round(vec3 x) { return floor(x + 0.5); }\nvec4 round(vec4 x) { return floor(x + 0.5); }\nfloat trunc( float x, float n ) { return floor(x*n)/n; }\nmat3 transpose(mat3 m) { return mat3(m[0].x, m[1].x, m[2].x, m[0].y, m[1].y, m[2].y, m[0].z, m[1].z, m[2].z); }\nfloat determinant( in mat2 m ) { return m[0][0]*m[1][1] - m[0][1]*m[1][0]; }\nfloat determinant( mat4 m ) { float b00 = m[0][0] * m[1][1] - m[0][1] * m[1][0], b01 = m[0][0] * m[1][2] - m[0][2] * m[1][0], b02 = m[0][0] * m[1][3] - m[0][3] * m[1][0], b03 = m[0][1] * m[1][2] - m[0][2] * m[1][1], b04 = m[0][1] * m[1][3] - m[0][3] * m[1][1], b05 = m[0][2] * m[1][3] - m[0][3] * m[1][2], b06 = m[2][0] * m[3][1] - m[2][1] * m[3][0], b07 = m[2][0] * m[3][2] - m[2][2] * m[3][0], b08 = m[2][0] * m[3][3] - m[2][3] * m[3][0], b09 = m[2][1] * m[3][2] - m[2][2] * m[3][1], b10 = m[2][1] * m[3][3] - m[2][3] * m[3][1], b11 = m[2][2] * m[3][3] - m[2][3] * m[3][2];  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;}\nmat2 inverse(mat2 m) { float det = determinant(m); return mat2(m[1][1], -m[0][1], -m[1][0], m[0][0]) / det; }\nmat4 inverse(mat4 m ) { float inv0 = m[1].y*m[2].z*m[3].w - m[1].y*m[2].w*m[3].z - m[2].y*m[1].z*m[3].w + m[2].y*m[1].w*m[3].z + m[3].y*m[1].z*m[2].w - m[3].y*m[1].w*m[2].z; float inv4 = -m[1].x*m[2].z*m[3].w + m[1].x*m[2].w*m[3].z + m[2].x*m[1].z*m[3].w - m[2].x*m[1].w*m[3].z - m[3].x*m[1].z*m[2].w + m[3].x*m[1].w*m[2].z; float inv8 = m[1].x*m[2].y*m[3].w - m[1].x*m[2].w*m[3].y - m[2].x  * m[1].y * m[3].w + m[2].x  * m[1].w * m[3].y + m[3].x * m[1].y * m[2].w - m[3].x * m[1].w * m[2].y; float inv12 = -m[1].x  * m[2].y * m[3].z + m[1].x  * m[2].z * m[3].y +m[2].x  * m[1].y * m[3].z - m[2].x  * m[1].z * m[3].y - m[3].x * m[1].y * m[2].z + m[3].x * m[1].z * m[2].y; float inv1 = -m[0].y*m[2].z * m[3].w + m[0].y*m[2].w * m[3].z + m[2].y  * m[0].z * m[3].w - m[2].y  * m[0].w * m[3].z - m[3].y * m[0].z * m[2].w + m[3].y * m[0].w * m[2].z; float inv5 = m[0].x  * m[2].z * m[3].w - m[0].x  * m[2].w * m[3].z - m[2].x  * m[0].z * m[3].w + m[2].x  * m[0].w * m[3].z + m[3].x * m[0].z * m[2].w - m[3].x * m[0].w * m[2].z; float inv9 = -m[0].x  * m[2].y * m[3].w +  m[0].x  * m[2].w * m[3].y + m[2].x  * m[0].y * m[3].w - m[2].x  * m[0].w * m[3].y - m[3].x * m[0].y * m[2].w + m[3].x * m[0].w * m[2].y; float inv13 = m[0].x  * m[2].y * m[3].z - m[0].x  * m[2].z * m[3].y - m[2].x  * m[0].y * m[3].z + m[2].x  * m[0].z * m[3].y + m[3].x * m[0].y * m[2].z - m[3].x * m[0].z * m[2].y; float inv2 = m[0].y  * m[1].z * m[3].w - m[0].y  * m[1].w * m[3].z - m[1].y  * m[0].z * m[3].w + m[1].y  * m[0].w * m[3].z + m[3].y * m[0].z * m[1].w - m[3].y * m[0].w * m[1].z; float inv6 = -m[0].x  * m[1].z * m[3].w + m[0].x  * m[1].w * m[3].z + m[1].x  * m[0].z * m[3].w - m[1].x  * m[0].w * m[3].z - m[3].x * m[0].z * m[1].w + m[3].x * m[0].w * m[1].z; float inv10 = m[0].x  * m[1].y * m[3].w - m[0].x  * m[1].w * m[3].y - m[1].x  * m[0].y * m[3].w + m[1].x  * m[0].w * m[3].y + m[3].x * m[0].y * m[1].w - m[3].x * m[0].w * m[1].y; float inv14 = -m[0].x  * m[1].y * m[3].z + m[0].x  * m[1].z * m[3].y + m[1].x  * m[0].y * m[3].z - m[1].x  * m[0].z * m[3].y - m[3].x * m[0].y * m[1].z + m[3].x * m[0].z * m[1].y; float inv3 = -m[0].y * m[1].z * m[2].w + m[0].y * m[1].w * m[2].z + m[1].y * m[0].z * m[2].w - m[1].y * m[0].w * m[2].z - m[2].y * m[0].z * m[1].w + m[2].y * m[0].w * m[1].z; float inv7 = m[0].x * m[1].z * m[2].w - m[0].x * m[1].w * m[2].z - m[1].x * m[0].z * m[2].w + m[1].x * m[0].w * m[2].z + m[2].x * m[0].z * m[1].w - m[2].x * m[0].w * m[1].z; float inv11 = -m[0].x * m[1].y * m[2].w + m[0].x * m[1].w * m[2].y + m[1].x * m[0].y * m[2].w - m[1].x * m[0].w * m[2].y - m[2].x * m[0].y * m[1].w + m[2].x * m[0].w * m[1].y; float inv15 = m[0].x * m[1].y * m[2].z - m[0].x * m[1].z * m[2].y - m[1].x * m[0].y * m[2].z + m[1].x * m[0].z * m[2].y + m[2].x * m[0].y * m[1].z - m[2].x * m[0].z * m[1].y; float det = m[0].x * inv0 + m[0].y * inv4 + m[0].z * inv8 + m[0].w * inv12; det = 1.0 / det; return det*mat4( inv0, inv1, inv2, inv3,inv4, inv5, inv6, inv7,inv8, inv9, inv10, inv11,inv12, inv13, inv14, inv15);}\nfloat sinh(float x)  { return (exp(x)-exp(-x))/2.; }\nfloat cosh(float x)  { return (exp(x)+exp(-x))/2.; }\nfloat tanh(float x)  { return sinh(x)/cosh(x); }\nfloat coth(float x)  { return cosh(x)/sinh(x); }\nfloat sech(float x)  { return 1./cosh(x); }\nfloat csch(float x)  { return 1./sinh(x); }\nfloat asinh(float x) { return    log(x+sqrt(x*x+1.)); }\nfloat acosh(float x) { return    log(x+sqrt(x*x-1.)); }\nfloat atanh(float x) { return .5*log((1.+x)/(1.-x)); }\nfloat acoth(float x) { return .5*log((x+1.)/(x-1.)); }\nfloat asech(float x) { return    log((1.+sqrt(1.-x*x))/x); }\nfloat acsch(float x) { return    log((1.+sqrt(1.+x*x))/x); }\n",s?(l+="vec4 textureLod(  sampler2D   s, vec2 c, float b)          { return texture2DLodEXT(s,c,b); }\n",l+="vec4 textureGrad( sampler2D   s, vec2 c, vec2 dx, vec2 dy) { return texture2DGradEXT(s,c,dx,dy); }\n"):pe=pe.replace("textureLod","texture")),l+=pe,this.shader=e.linkShader(this.gl,r,l),this.shader.vertexAttribute=this.gl.getAttribLocation(this.shader,"aPosition"),this.gl.enableVertexAttribArray(this.shader.vertexAttribute),this.height=window.innerHeight/t,this.width=window.innerWidth/t,this.canvas.setAttribute("width",this.width),this.canvas.setAttribute("height",this.height),this.vertexBuffer=e.createVBO(this.gl,3,[1,1,0,-1,1,0,1,-1,0,-1,-1,0]),this.running=!1,this.time0=0}var n,t,o;return n=e,o=[{key:"createVBO",value:function(e,n,t){var o=e.createBuffer();return e.bindBuffer(e.ARRAY_BUFFER,o),e.bufferData(e.ARRAY_BUFFER,new Float32Array(t),e.STATIC_DRAW),o.itemSize=n,o.numItems=t.length/n,o}},{key:"linkShader",value:function(n,t,o){var i=n.createProgram();if(n.attachShader(i,e.compileShader(n,n.VERTEX_SHADER,t)),n.attachShader(i,e.compileShader(n,n.FRAGMENT_SHADER,o)),n.linkProgram(i),!n.getProgramParameter(i,n.LINK_STATUS))throw e.showLogProgram(n,i),"Failed to link shader!";return i.uniformLocation=function(e,n){return e.getUniformLocation(i,n)},i}},{key:"compileShader",value:function(n,t,o){var i=n.createShader(t);if(n.shaderSource(i,o),n.compileShader(i),!n.getShaderParameter(i,n.COMPILE_STATUS)){var a=t==n.VERTEX_SHADER?"vertex shader":"fragment shader";throw e.showLog(n,i),"Failed to compile ".concat(a)}return i}},{key:"getTime",value:function(){return.001*(new Date).getTime()}},{key:"showLog",value:function(e,n){var t=e.getShaderInfoLog(n);console.log("ERROR: "+t)}},{key:"showLogProgram",value:function(e,n){var t=e.getProgramInfoLog(n);console.log("ERROR: "+t)}}],(t=[{key:"loadTexture",value:function(e,n){var t=this,o=this.gl.createTexture(),i=this.gl;o.image=new Image,o.image.onload=function(){i.bindTexture(i.TEXTURE_2D,o),i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,!0);try{i.texImage2D(i.TEXTURE_2D,0,i.RGBA,i.RGBA,i.UNSIGNED_BYTE,o.image)}catch(e){console.log("ERROR: Failed to load texture ".concat(n," : ").concat(e)),console.log("INFO: Generating placeholder texture for ".concat(n));for(var a=[],r=0;r<64;r++)for(var c=0;c<64;c++){var s=(parseInt(c/4)+parseInt(r/4))%2*255;a=a.concat([s,s,s,255])}i.texImage2D(i.TEXTURE_2D,0,i.RGBA,64,64,0,i.RGBA,i.UNSIGNED_BYTE,new Uint8Array(a))}i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MAG_FILTER,i.LINEAR),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MIN_FILTER,i.LINEAR),i.bindTexture(i.TEXTURE_2D,null),t.textures[e]=o},o.image.src=n}},{key:"start",value:function(){this.running||this._start()}},{key:"_start",value:function(){this.running=!0,this.time0=e.getTime(),this.timePreviousFrame=this.time0,this.gl.disable(this.gl.DEPTH_TEST),this.gl.viewport(0,0,this.width,this.height),this.gl.useProgram(this.shader)}},{key:"stop",value:function(){this.running=!1}},{key:"frame",value:function(n){var t=this.gl;if(this.running){var o=this.shader,i=e.getTime()-this.time0;for(var a in this.timePreviousFrame,this.timePreviousFrame=i,t.clear(t.DEPTH_BUFFER_BIT),t.bindBuffer(t.ARRAY_BUFFER,this.vertexBuffer),t.vertexAttribPointer(o.vertexAttribute,this.vertexBuffer.itemSize,t.FLOAT,!1,0,0),this.textures){var r=this.textures[a];t.activeTexture(t.TEXTURE0+parseInt(a)),t.bindTexture(t.TEXTURE_2D,r),t.uniform1i(t.getUniformLocation(o,"iChannel"+a),a)}t.uniform3f(t.getUniformLocation(o,"iResolution"),this.width,this.height,0),t.uniform1f(t.getUniformLocation(o,"iGlobalTime"),i),t.uniform1f(t.getUniformLocation(o,"iTime"),i),t.uniform1f(t.getUniformLocation(o,"gameTime"),n),t.drawArrays(t.TRIANGLE_STRIP,0,this.vertexBuffer.numItems)}}}])&&fe(n.prototype,t),o&&fe(n,o),e}();t.d(n,"canvas",(function(){return ze})),t.d(n,"width",(function(){return ke})),t.d(n,"height",(function(){return Ee})),t.d(n,"ratio",(function(){return be})),t.d(n,"universe",(function(){return ge})),t.d(n,"reset",(function(){return Xe}));var ve=200,xe=100,ye=194,ge=o.b.new(ve,ve);function we(){ge.paint(xe,xe,ye+2,o.a.Glass),ge.paint(xe-30,ye-3,20,o.a.Wood),ge.paint(xe+30,ye-3,20,o.a.Wood),ge.paint(xe,xe,ye-2,o.a.Air)}we();var be=2,ke=ve,Ee=ve,ze=document.getElementById("sand-canvas");ze.height=ve*be*Math.ceil(window.devicePixelRatio),ze.width=ve*be*Math.ceil(window.devicePixelRatio);var Se,_e=document.getElementById("HUD"),Ae=function(){var e=window.innerWidth,n="",t="";e-150>window.innerHeight-50?e-window.innerHeight<400?(n="height: ".concat(window.innerHeight,"px; margin:3px"),Se=window.innerHeight,t="width: ".concat(e-window.innerHeight-12,"px; margin: 2px;")):(n="height: ".concat(window.innerHeight,"px"),Se=window.innerHeight,t="width: ".concat((e-window.innerHeight)/2-7,"px; margin: 2px;")):(Se=e,n="width: ".concat(e,"px; "),t=""),_e.style=t,ze.style=n};Ae(),window.addEventListener("deviceorientation",Ae,!0),window.addEventListener("resize",Ae);var Re,De,Ce=u({canvas:ze,universe:ge}),Te=Se/ve;try{(De=new de("sky-canvas",2*Te)).loadTexture(0,"assets/noise.png"),De.start(),Re=De}catch(e){console.error("skys haunted"),Re={frame:function(){}}}var Ie,Me,Le,Pe,Ue,Fe,Oe=document.getElementById("plot-canvas"),Ne=(Me=(Ie={canvas:Oe,universe:ge}).canvas,Le=Ie.universe,Pe=h({canvas:Me}),Ue=Pe.texture({width:45,height:1,data:v}),Fe=Pe({blend:{enable:!0,func:{srcRGB:"src alpha",srcAlpha:1,dstRGB:"one minus src alpha",dstAlpha:1},equation:{rgb:"add",alpha:"add"},color:[0,0,0,0]},frag:m,uniforms:{t:function(e){return e.tick},i:function(){return p},n_readings:function(){return d},max_readings:180,data:function(){return Ue({width:45,height:1,data:v})},resolution:function(e){return[e.viewportWidth,e.viewportHeight]},dpi:4},vert:f,attributes:{position:[[-1,4],[-1,-1],[4,-1]]},count:3}),{drawPlot:function(){Pe.poll(),Fe()},recordDataPoint:function(){0==x++?(v[p]=255*Le.o2()/Le.total_gas(),p=(p+1)%180,d=Math.max(p,d)):x%=80}}),Be=Ne.drawPlot,Ge=Ne.recordDataPoint,je=parseInt(localStorage.getItem("time"),10)||0;function Xe(){console.log("reseting"),localStorage.setItem("cell_data",null),ge.reset(),localStorage.setItem("o2",ge.total_gas()/2),localStorage.setItem("time",0),we()}window.u=ge,window.universe=ge,function e(){for(var n=performance.now(),t=window.ff?11:1,o=0;o<t;o++){var i=je/50%255;if(window.paused||(g.render(),ge.tick(),je+=1,i>70&&i<170&&(je+=10)),ge.set_time(i),Ge(),performance.now()-n>13)break}window.t=je,Ce.draw();var a=i/255;Re.frame(a),Be(),window.animWebationId=requestAnimationFrame(e)}(),window.UI.load()},function(e,n,t){"use strict";t.d(n,"a",(function(){return v})),t.d(n,"b",(function(){return x})),t.d(n,"i",(function(){return y})),t.d(n,"c",(function(){return g})),t.d(n,"d",(function(){return w})),t.d(n,"e",(function(){return b})),t.d(n,"g",(function(){return k})),t.d(n,"f",(function(){return E})),t.d(n,"j",(function(){return z})),t.d(n,"h",(function(){return S}));var o=t(11);function i(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function a(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function r(e,n,t){return n&&a(e.prototype,n),t&&a(e,t),e}var c=new Array(32);c.fill(void 0),c.push(void 0,null,!0,!1);var s=c.length;function l(e){s===c.length&&c.push(c.length+1);var n=s;return s=c[n],c[n]=e,n}function u(e){return c[e]}function h(e){var n=u(e);return function(e){e<36||(c[e]=s,s=e)}(e),n}var m=new TextDecoder("utf-8"),f=null;function p(e,n){return m.decode((null!==f&&f.buffer===o.e.buffer||(f=new Uint8Array(o.e.buffer)),f).subarray(e,e+n))}var d,v=Object.freeze({Air:0,Glass:1,Sand:2,Stone:12,Wood:13,Water:3,Algae:4,Zoop:6,Daphnia:14,Seed:11,Plant:5,Bacteria:8,Fish:7,FishTail:15,GoldFish:18,GoldFishTail:19,Nitrogen:9,Waste:10,Bubble:16,Biofilm:17,Plastic:20}),x=function(){function e(){i(this,e)}return r(e,[{key:"free",value:function(){var e=this.ptr;this.ptr=0,o.d(e)}},{key:"reset",value:function(){o.t(this.ptr)}},{key:"calculate_light",value:function(){o.f(this.ptr)}},{key:"cast_ray",value:function(e,n,t,i,a){o.g(this.ptr,e,n,t,i,a)}},{key:"tick",value:function(){o.x(this.ptr)}},{key:"width",value:function(){return o.z(this.ptr)}},{key:"height",value:function(){return o.k(this.ptr)}},{key:"o2",value:function(){return o.o(this.ptr)>>>0}},{key:"total_gas",value:function(){return o.y(this.ptr)>>>0}},{key:"co2",value:function(){return o.i(this.ptr)>>>0}},{key:"cells",value:function(){return o.h(this.ptr)}},{key:"lights",value:function(){return o.m(this.ptr)}},{key:"sprite",value:function(){return o.w(this.ptr)}},{key:"place_sprite",value:function(e,n,t){o.q(this.ptr,e,n,l(t))}},{key:"paint",value:function(e,n,t,i){o.p(this.ptr,e,n,t,i)}},{key:"push_undo",value:function(){o.s(this.ptr)}},{key:"pop_undo",value:function(){o.r(this.ptr)}},{key:"flush_undos",value:function(){o.j(this.ptr)}},{key:"set_time",value:function(e){o.v(this.ptr,e)}},{key:"set_o2",value:function(e){o.u(this.ptr,e)}},{key:"inc_time",value:function(){o.l(this.ptr)}}],[{key:"__wrap",value:function(n){var t=Object.create(e.prototype);return t.ptr=n,t}},{key:"new",value:function(n,t){var i=o.n(n,t);return e.__wrap(i)}}]),e}(),y=function(e){h(e)},g=function(e){return l(u(e).buffer)},w=function(e){return u(e).length},b=function(e){return l(new Uint8Array(u(e)))},k=function(e,n,t){u(e).set(u(n),t>>>0)},E="function"==typeof Math.random?Math.random:(d="Math.random",function(){throw new Error("".concat(d," is not defined"))}),z=function(e,n){throw new Error(p(e,n))},S=function(){return l(o.e)}},,,,,,,,,function(e,n,t){"use strict";var o=t.w[e.i];e.exports=o;t(2);o.A()},,,,,,,,,,,,,,,,,,,function(e,n){e.exports='\n// boring "pass-through" vertex shader\nprecision mediump float;\n#define GLSLIFY 1\nattribute vec2 position;\nvarying vec2 uv;\nvoid main() {\n  uv = position;\n  gl_Position = vec4(position, 0, 1);\n}'},,function(e,n,t){e.exports=t.p+"assets/bubblebig.png"},function(e,n,t){e.exports=t.p+"assets/bubblemed.png"},function(e,n,t){e.exports=t.p+"assets/bubblesmall.png"},,,,,,,,,,,function(e,n){},,function(e,n){},,,,,,,,,,function(e,n){e.exports="precision highp float;\n#define GLSLIFY 1\nuniform float t;\nuniform float dpi;\nuniform vec2 resolution;\nuniform bool isSnapshot;\nuniform sampler2D backBuffer;\nuniform sampler2D dataTexture;\nuniform sampler2D lightTexture;\nuniform sampler2D spriteTexture;\n\nvarying vec2 uv;\n\n// clang-format off\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_1(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289_1(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute_1(vec4 x) {\n     return mod289_1(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise_1(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g_0 = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g_0;\n  vec3 i1 = min( g_0.xyz, l.zxy );\n  vec3 i2 = max( g_0.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289_1(i);\n  vec4 p = permute_1( permute_1( permute_1(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_0(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289_0(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute_0(vec3 x) {\n  return mod289_0(((x*34.0)+1.0)*x);\n}\n\nfloat snoise_0(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289_0(i); // Avoid truncation effects in permutation\n  vec3 p = permute_0( permute_0( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nhighp float random(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\n// clang-format on\n\nvoid main() {\n  vec3 color;\n  vec2 grid = floor(uv * (resolution / dpi));\n\n  float noise = snoise_1(vec3(grid, t * 0.05));\n  vec2 noise_2d = vec2(floor(0.5 + noise),\n                       floor(0.5 + snoise_1(vec3(grid, (t + 20.) * 0.05))));\n\n  vec2 textCoord = (uv * vec2(0.5, -0.5)) + vec2(0.5);\n  vec2 sampleCoord = textCoord + (noise_2d / (resolution / 2.));\n\n  vec4 data = texture2D(dataTexture, textCoord);\n  // vec4 dataSample = texture2D(dataTexture, sampleCoord);\n\n  vec4 lightCell = texture2D(lightTexture, textCoord);\n  vec4 spriteValue = texture2D(spriteTexture, textCoord);\n\n  float lightValue = lightCell.r;\n  float blueLightValue = lightCell.b;\n\n  vec4 lightSampleCell = texture2D(lightTexture, sampleCoord);\n  float sampleLightValue = lightSampleCell.r;\n\n  lightValue = 0.5 * lightValue + 0.5 * sampleLightValue;\n  int type = int((data.r * 255.) + 0.1);\n  float energy = data.g;\n  float age = data.b;\n\n  float hue = 0.0;\n  float saturation = 0.6;\n  float lightness = 0.3 + energy * 0.5;\n  float a = 1.0;\n  float brightness = 0.0;\n\n  if (type == 0) { // Air\n\n    hue = 0.0;\n    saturation = 0.1;\n    lightness = 0.1;\n    a = 0.0;\n    if (isSnapshot) {\n      saturation = 0.05;\n      lightness = 1.01;\n      a = 1.0;\n    }\n\n  } else if (type == 1) { // Glass\n    hue = 0.1;\n    saturation = 0.2;\n    lightness = 1.0;\n    a = 0.4 + lightValue * 0.3;\n  } else if (type == 2) { // Sand\n    hue = 0.1;\n    saturation = 0.4 + (age * 0.3);\n    lightness = 1.3 - energy * 1.2;\n\n  } else if (type == 3) { // Water\n    hue = 0.58;\n    saturation = 0.6;\n    lightness = 0.5 + energy * 0.25 + noise * 0.1;\n    a = 0.4;\n    if (isSnapshot) {\n      a = 1.0;\n    }\n  } else if (type == 4) { // Algae\n    hue = 0.4 - age * 0.3;\n    lightness += 0.1;\n    saturation = 0.5 - (energy * .1);\n  } else if (type == 5) { // Plant\n    hue = 0.4;\n    saturation = 0.4;\n\n    if (energy > 45. / 255.) {\n      hue = 0.48;\n    }\n    if (age == 0.) {\n      // saturation = 0.9;\n    }\n    lightness = 0.2 + (1.0 - energy) * 0.4;\n\n  } else if (type == 6) { // Zoop\n    hue = 0.9;\n    lightness += 0.7;\n  } else if (type == 7) { // Fish\n    hue = 0.0;\n    lightness += 0.4;\n  } else if (type == 8) { // Bacteria\n    hue = 0.66;\n    saturation += 0.2;\n    lightness += 0.2;\n    a = 0.5;\n    if (isSnapshot) {\n      // lightness += 0.8;\n      saturation -= 0.2;\n\n      a = 1.0;\n    }\n\n  } else if (type == 9) { // ???\n    hue = 0.6;\n    saturation = 0.4;\n    lightness = 0.7 + data.g * 0.5;\n  } else if (type == 10) { // Waste\n    hue = 0.9;\n    lightness -= 0.3;\n    saturation = 0.4;\n  } else if (type == 11) { // Seed\n    hue = 0.4;\n    saturation = 0.4;\n  } else if (type == 12) { // Stone\n    hue = -0.4 + (data.g * 0.5);\n    saturation = 0.1;\n  } else if (type == 13) { // Wood\n    hue = (data.g * 0.1);\n    saturation = 0.3;\n    lightness = 0.3 + data.g * 0.3;\n  } else if (type == 14) { // Egg\n    hue = 0.9;\n    saturation = age / 3.;\n    lightness = 1.0;\n    a = 0.8;\n\n  } else if (type == 15) { // Tail\n    hue += fract(age * 1.9 * 255. / 8.) * 0.2;\n    lightness += 0.4;\n    saturation -= (fract(age * 1.9 * 255. / 8.) - 0.1) * 0.7;\n\n    // saturation += fract(age * 255.*6.);\n  } else if (type == 16) { // bubble\n\n    hue = 0.0;\n    saturation = 0.1;\n    lightness = 0.1;\n    a = 0.0;\n    if (isSnapshot) {\n      saturation = 0.05;\n      lightness = 1.01;\n      a = 1.0;\n    }\n  } else if (type == 17) { // biofilm\n    hue = 0.48;\n    saturation = 0.6;\n    lightness = 0.5 + energy * 0.25 + noise * 0.1;\n    a = 0.4;\n    if (isSnapshot) {\n      a = 1.0;\n    }\n  } else if (type == 18) { // goldfish\n    hue = 0.1;\n    lightness += 0.4;\n    saturation = 0.7;\n  } else if (type == 19) { // goldfishtail\n    hue = 0.1;\n    hue += fract(age * 1.9 * 255. / 9.) * 0.1;\n    lightness += 0.8;\n    saturation = 0.8;\n    saturation -= (fract(age * 1.9 * 255. / 7.) - 0.1) * 0.6;\n  } else if (type == 20) { // plastic\n    hue = 0.1;\n    lightness += 0.5;\n    saturation = 0.1;\n  }\n\n  // } else if (type == 16) { // oil\n  //   hue = (data.g * 5.0) + t * .008;\n\n  //   saturation = 0.2;\n  //   lightness = 0.3;\n  // } else if (type == 17) { // Rocket\n  //   hue = 0.0;\n  //   saturation = 0.4 + data.b;\n  //   lightness = 0.9;\n  // } else if (type == 18) { // fungus\n  //   hue = (data.g * 0.15) - 0.1;\n  //   saturation = (data.g * 0.8) - 0.05;\n\n  //   // (data.g * 0.00);\n  //   lightness = 1.5 - (data.g * 0.2);\n  // } else if (type == 19) { // seed/flower\n\n  //   hue = fract(fract(data.b * 2.) * 0.5) - 0.3;\n  //   saturation = 0.7 * (data.g + 0.4) + data.b * 0.2;\n  //   lightness = 0.9 * (data.g + 0.9);\n  // }\n  if (isSnapshot == false) {\n    lightness *= (0.975 + snoise_0(floor(uv * resolution / dpi)) * 0.025);\n  }\n  lightness += lightValue / 2.;\n  saturation = min(saturation, 1.0);\n  lightness = min(lightness, 1.0);\n  color = hsv2rgb(vec3(hue, saturation, lightness));\n\n  color += vec3(0.25, 0.25, 0.7) * 0.6 * (blueLightValue + lightSampleCell.b);\n  a += blueLightValue + lightSampleCell.b;\n  gl_FragColor = vec4(color, a);\n  if (spriteValue.a > 0.) {\n    vec4 spriteColor = spriteValue;\n\n    spriteColor.rgb *= ((lightValue) + 0.7);\n    gl_FragColor = spriteColor;\n  }\n}"},function(e,n){e.exports="precision highp float;\n#define GLSLIFY 1\nuniform float t;\nuniform float i;\nuniform float max_readings;\nuniform float n_readings;\nuniform float dpi;\nuniform vec2 resolution;\nuniform sampler2D data;\n\nvarying vec2 uv;\n\n// clang-format off\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_1(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289_1(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute_1(vec4 x) {\n     return mod289_1(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise_1(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g_0 = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g_0;\n  vec3 i1 = min( g_0.xyz, l.zxy );\n  vec3 i2 = max( g_0.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289_1(i);\n  vec4 p = permute_1( permute_1( permute_1(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_0(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289_0(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute_0(vec3 x) {\n  return mod289_0(((x*34.0)+1.0)*x);\n}\n\nfloat snoise_0(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289_0(i); // Avoid truncation effects in permutation\n  vec3 p = permute_0( permute_0( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nhighp float random(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\n// clang-format on\n\nvoid main() {\n  vec3 color;\n  vec2 grid = floor(uv * resolution / dpi);\n  vec2 pixel = 1. / resolution;\n  vec2 pos = (uv + vec2(1.0)) * 0.5;\n\n  // pos.x = fract(pos.x + i / max_readings);\n  vec2 textCoord = vec2(pos.x, 0.5);\n  //   vec2 textCoord = (uv * vec2(0.5, 0)) + vec2(0.5);\n\n  vec4 data = texture2D(data, textCoord);\n  float v = data.x;\n  float buckets = resolution.y / 4.;\n  // discretized\n  float dV = floor(v * buckets) / buckets;\n  // float dVLeading = floor(data.a * buckets) / buckets;\n\n  float a = 1.0;\n\n  //   vec2 pos+= (i*4.)/max_readings;\n  //   lightness = min(lightness, 1.0);\n  gl_FragColor = vec4(0.98, 1., 0.98, 0.5);\n\n  //   if (\n\n  if (pos.x < n_readings / max_readings && abs(dV - pos.y) < pixel.y * 2.0) {\n    gl_FragColor = vec4(hsv2rgb(vec3(-0.1 + v * 0.8, 0.5, 0.5)), 1.0);\n\n  } else if (abs((i / max_readings) - pos.x) < pixel.x * 4.\n\n             && abs(dV - pos.y) < pixel.y * 2.0 && dV > 0.) {\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n  } else if (abs((pos.y - 0.5) * resolution.y) < 2.0 &&\n             mod(pos.x * resolution.x, 8.0) > 4.0) {\n    gl_FragColor = vec4(0., 0.1, 0., 0.4);\n  }\n\n  //  else {\n  // }\n}"},,,,,,,,function(e,n,t){var o={"./100.ico":67,"./8ball.ico":68,"./TV.ico":69,"./alien2.ico":70,"./anchor.ico":71,"./apple.ico":72,"./armchair.ico":73,"./ball.ico":74,"./banana.ico":75,"./bart.ico":76,"./baseball.ico":77,"./bee.ico":78,"./bone.ico":79,"./bow.ico":80,"./bust.ico":81,"./cactus.ico":82,"./camera.ico":83,"./carrot.ico":84,"./castle.ico":85,"./castle2.ico":86,"./caution.ico":87,"./chair.ico":88,"./chamomile.ico":89,"./cherry.ico":90,"./cherryblossom.ico":91,"./coin.ico":92,"./computer.ico":93,"./controller.ico":94,"./crown.ico":95,"./crucifix.ico":96,"./cube.ico":97,"./cubeblue.ico":98,"./cursor.ico":99,"./dead.ico":100,"./dice2.ico":101,"./dinoegg.ico":102,"./disc.ico":103,"./dna.ico":104,"./dollar.ico":105,"./donut.ico":106,"./earth.ico":107,"./egg.ico":108,"./eiffel.ico":109,"./elephant.ico":110,"./eyeball.ico":111,"./flower.ico":112,"./folder.ico":113,"./gameboy.ico":114,"./gem1.ico":115,"./gem2.ico":116,"./glasses3d.ico":117,"./grave.ico":118,"./heartPastel.ico":119,"./heel.ico":120,"./herb.ico":121,"./hibiscus.ico":122,"./horse.ico":123,"./ipad.ico":124,"./itunes.ico":125,"./jasmineflower.ico":126,"./key.ico":127,"./keys.ico":128,"./lemon.ico":129,"./lighter.ico":130,"./lips.ico":131,"./marble.ico":132,"./mess.ico":133,"./mic.ico":134,"./moon.ico":135,"./mouse.ico":136,"./mug.ico":137,"./music.ico":138,"./nasa.ico":139,"./nautilus.ico":140,"./officechair.ico":141,"./onigiri.ico":142,"./orb.ico":143,"./palmtree.ico":144,"./patrick.ico":145,"./pawn.ico":146,"./peach.ico":147,"./pencil.ico":148,"./pin.ico":149,"./pineapple.ico":150,"./pizza2.ico":151,"./pokeball.ico":152,"./pot.ico":153,"./prideflag.ico":154,"./ps2.ico":155,"./pyramid.ico":156,"./rainbow.ico":157,"./ring.ico":158,"./saturn.ico":159,"./sauron.ico":160,"./ship.ico":161,"./sims.ico":162,"./skull.ico":163,"./sparkle.ico":164,"./sparkleheart.ico":165,"./spinner.ico":166,"./squash.ico":167,"./statue.ico":168,"./sword.ico":169,"./table.ico":170,"./tombone.ico":171,"./tooth.ico":172,"./trans.ico":173,"./transfer.ico":174,"./trophy.ico":175,"./umbrella.ico":176,"./vlc.ico":177,"./volleyball.ico":178,"./whale.ico":179,"./word.ico":180,"./yin-yang.ico":181};function i(e){var n=a(e);return t(n)}function a(e){if(!t.o(o,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return o[e]}i.keys=function(){return Object.keys(o)},i.resolve=a,e.exports=i,i.id=66},function(e,n,t){e.exports=t.p+"tchotchkes/100.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/8ball.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/TV.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/alien2.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/anchor.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/apple.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/armchair.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/ball.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/banana.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/bart.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/baseball.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/bee.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/bone.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/bow.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/bust.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/cactus.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/camera.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/carrot.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/castle.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/castle2.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/caution.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/chair.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/chamomile.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/cherry.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/cherryblossom.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/coin.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/computer.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/controller.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/crown.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/crucifix.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/cube.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/cubeblue.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/cursor.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/dead.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/dice2.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/dinoegg.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/disc.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/dna.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/dollar.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/donut.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/earth.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/egg.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/eiffel.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/elephant.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/eyeball.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/flower.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/folder.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/gameboy.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/gem1.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/gem2.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/glasses3d.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/grave.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/heartPastel.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/heel.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/herb.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/hibiscus.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/horse.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/ipad.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/itunes.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/jasmineflower.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/key.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/keys.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/lemon.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/lighter.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/lips.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/marble.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/mess.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/mic.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/moon.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/mouse.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/mug.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/music.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/nasa.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/nautilus.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/officechair.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/onigiri.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/orb.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/palmtree.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/patrick.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/pawn.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/peach.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/pencil.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/pin.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/pineapple.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/pizza2.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/pokeball.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/pot.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/prideflag.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/ps2.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/pyramid.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/rainbow.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/ring.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/saturn.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/sauron.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/ship.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/sims.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/skull.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/sparkle.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/sparkleheart.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/spinner.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/squash.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/statue.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/sword.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/table.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/tombone.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/tooth.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/trans.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/transfer.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/trophy.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/umbrella.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/vlc.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/volleyball.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/whale.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/word.ico"},function(e,n,t){e.exports=t.p+"tchotchkes/yin-yang.ico"},,,,,,,,,,,,,,function(e,n,t){e.exports=t.p+"assets/daphnia2.gif"},function(e,n){var t=document.getElementById("background"),o=window.setTimeout((function(){window.UI.state.tutorialProgress>3&&document.body.classList.add("faded")}),3e4),i=function(e){window.clearTimeout(o),document.body.classList.remove("faded"),o=window.setTimeout((function(){window.UI.state.tutorialProgress>3&&document.body.classList.add("faded")}),3e4)};document.body.addEventListener("mousemove",i),document.body.addEventListener("touchstart",i),t.addEventListener("touchmove",(function(e){window.paused||e.cancelable&&e.preventDefault()}))},function(e,n){e.exports="#define GLSLIFY 1\n// clang-format off\n\nuniform vec3 iResolution;\nuniform float iGlobalTime, iTime, gameTime;\nuniform sampler2D iChannel0;\n// Appropriated with love & respect from:///\n// The sun, the sky and the clouds. By StillTravelling\n// https://www.shadertoy.com/view/tdSXzD\n// Very much a messy hack sorry!!\n\n// Many Thank yous go to the below for their amazing work\n// Day and night sky cycle. By László Matuska (@BitOfGold)\n// Creates a sky texture for a skydome\n// https://www.shadertoy.com/view/ltlSWB\n\n// Weather. By David Hoskins, May 2014.\n// https://www.shadertoy.com/view/4dsXWn\n\n// Edge of atmosphere by dmytro rubalskyi (ruba)\n// https://www.shadertoy.com/view/XlXGzB\n\n// Auroras by nimitz\n// https://www.shadertoy.com/view/XtGGRt\n\n// Sorry to those I've missed out!!\n\n#define ORIG_CLOUD 0\n#define ENABLE_RAIN 0 // enable rain drops on screen\n#define SIMPLE_SUN 0\n#define NICE_HACK_SUN 1\n#define SOFT_SUN 1\n#define cloudy 0.5 // 0.0 clear sky\n#define haze 0.01 * (cloudy * 20.)\n#define rainmulti 5.0 // makes clouds thicker\n#define rainy (10.0 - rainmulti)\n#define t iTime\n#define fov tan(radians(60.0))\n#define S(x, y, z) smoothstep(x, y, z)\n#define cameraheight 5e1   // 50.\n#define mincloudheight 5e3 // 5e3\n#define maxcloudheight 10e3 // 8e3\n#define xaxiscloud t * 5e2 // t*5e2 +t left -t right *speed\n#define yaxiscloud 0.      // 0.\n#define zaxiscloud t * 6e2 // t*6e2 +t away from horizon -t towards horizon *speed\n#define cloudnoise 2e-4 // 2e-4\n\n// clang-format on\n\n//#define cloud2\n\n// Performance\nconst int steps = 16;  // 16 is fast, 128 or 256 is extreme high\nconst int stepss = 16; // 16 is fast, 16 or 32 is high\n\n// Environment\nconst float R0 = 6360e3; // planet radius //6360e3 actual 6371km\nconst float Ra = 6380e3; // atmosphere radius //6380e3 troposphere 8 to 14.5km\nconst float I = 10.;     // sun light power, 10.0 is normal\nconst float SI = 5.;     // sun intensity for sun\nconst float g = 0.45;    // light concentration .76 //.45 //.6  .45 is normaL\nconst float g2 = g * g;\nconst float PI = 3.14159265358979323846;\nconst float PI2 = 2. * 3.14159265358979323846;\n\nconst float ts = (cameraheight / 2.5e5);\n\nconst float s = 0.999; // light concentration for sun\n#if SOFT_SUN\nconst float s2 = s;\n#else\nconst float s2 = s * s;\n#endif\nconst float Hr = 8e3;   // Rayleigh scattering top //8e3\nconst float Hm = 1.2e3; // Mie scattering top //1.3e3\n\nvec3 bM = vec3(21e-6); // normal mie // vec3(21e-6)\n// vec3 bM = vec3(50e-6); //high mie\n\n// Rayleigh scattering (sky color, atmospheric up to 8km)\nvec3 bR = vec3(5.8e-6, 13.5e-6, 33.1e-6); // normal earth\n// vec3 bR = vec3(5.8e-6, 33.1e-6, 13.5e-6); //purple\n// vec3 bR = vec3( 63.5e-6, 13.1e-6, 50.8e-6 ); //green\n// vec3 bR = vec3( 13.5e-6, 23.1e-6, 115.8e-6 ); //yellow\n// vec3 bR = vec3( 5.5e-6, 15.1e-6, 355.8e-6 ); //yeellow\n// vec3 bR = vec3(3.5e-6, 333.1e-6, 235.8e-6 ); //red-purple\n\nvec3 C = vec3(0., -R0, 0.);             // planet center\nvec3 Ds = normalize(vec3(0., 0., -1.)); // sun direction?\n\nfloat cloudyhigh = 0.05; // if cloud2 defined\n\n#if ORIG_CLOUD\nfloat cloudnear =\n    1.0; // 9e3 12e3  //do not render too close clouds on the zenith\nfloat cloudfar = 1e3; // 15e3 17e3\n#else\nfloat cloudnear = 1.0; // 15e3 17e3\nfloat cloudfar = 70e3; // 160e3  //do not render too close clouds on the horizon\n                       // 160km should be max for cumulus\n#endif\n\n// AURORA STUFF\nmat2 mm2(in float a) {\n  float c = cos(a);\n  float s = sin(a);\n  return mat2(c, s, -s, c);\n}\n\nmat2 m2 = mat2(0.95534, 0.29552, -0.29552, 0.95534);\n\nfloat tri(in float x) { return clamp(abs(fract(x) - .5), 0.01, 0.49); }\n\nvec2 tri2(in vec2 p) { return vec2(tri(p.x) + tri(p.y), tri(p.y + tri(p.x))); }\n\nfloat triNoise2d(in vec2 p, float spd) {\n  float z = 1.8;\n  float z2 = 2.5;\n  float rz = 0.;\n  p *= mm2(p.x * 0.06);\n  vec2 bp = p;\n  for (float i = 0.; i < 5.; i++) {\n    vec2 dg = tri2(bp * 1.85) * .75;\n    dg *= mm2(t * spd);\n    p -= dg / z2;\n\n    bp *= 1.3;\n    z2 *= 1.45;\n    z *= .42;\n    p *= 1.21 + (rz - 1.0) * .02;\n\n    rz += tri(p.x + tri(p.y)) * z;\n    p *= -m2;\n  }\n  return clamp(1. / pow(rz * 29., 1.3), 0., .55);\n}\n\nfloat hash21(in vec2 n) {\n  return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\nvec4 aurora(vec3 ro, vec3 rd) {\n  vec4 col = vec4(0);\n  vec4 avgCol = vec4(0);\n  ro *= 1e-5;\n  float mt = 10.;\n  for (float i = 0.; i < 5.; i++) {\n    float of = 0.006 * hash21(gl_FragCoord.xy) * smoothstep(0., 15., i * mt);\n    float pt = ((.8 + pow((i * mt), 1.2) * .001) - rd.y) / (rd.y * 2. + 0.4);\n    pt -= of;\n    vec3 bpos = (ro) + pt * rd;\n    vec2 p = bpos.zx;\n    // vec2 p = rd.zx;\n    float rzt = triNoise2d(p, 0.1);\n    vec4 col2 = vec4(0, 0, 0, rzt);\n    col2.rgb =\n        (sin(1. - vec3(2.15, -.5, 1.2) + (i * mt) * 0.053) * (0.5 * mt)) * rzt;\n    avgCol = mix(avgCol, col2, .5);\n    col += avgCol * exp2((-i * mt) * 0.04 - 2.5) * smoothstep(0., 5., i * mt);\n  }\n\n  col *= (clamp(rd.y * 15. + .4, 0., 1.2));\n  return col * 1.8;\n}\n\n// END AURORA STUFF\n\nfloat noise(in vec2 v) {\n  return 0.5;\n  //    texture(iChannel0,(v+.5)/256., 0.).r * 0.01;\n}\n\n// by iq\nfloat Noise(in vec3 x) {\n  vec3 p = floor(x);\n  vec3 f = fract(x);\n  f = f * f * (3.0 - 2.0 * f);\n\n  vec2 uv = (p.xy + vec2(37.0, 17.0) * p.z) + f.xy;\n  vec2 rg = textureLod(iChannel0, (uv + 0.5) / 256.0, -100.0).yx;\n  return mix(rg.x, rg.y, f.z);\n}\n\nfloat fnoise(vec3 p, in float t) {\n  p *= .25;\n  float f;\n\n  f = 0.5000 * Noise(p);\n  p = p * 3.02;\n  p.y -= t * .1; // t*.05 speed cloud changes\n  f += 0.2500 * Noise(p);\n  p = p * 3.03;\n  p.y += t * .06;\n  f += 0.1250 * Noise(p);\n  p = p * 3.01;\n  f += 0.0625 * Noise(p);\n  p = p * 3.03;\n  f += 0.03125 * Noise(p);\n  p = p * 3.02;\n  f += 0.015625 * Noise(p);\n  return f;\n}\n\nfloat cloud(vec3 p, in float t) {\n  float cld = fnoise(p * cloudnoise, t) + cloudy * 0.1;\n  cld = smoothstep(.4 + .04, .6 + .04, cld);\n  cld *= cld * (5.0 * rainmulti);\n  return cld + haze;\n}\n\nvoid densities(in vec3 pos, out float rayleigh, out float mie) {\n  float h = length(pos - C) - R0;\n  rayleigh = exp(-h / Hr);\n  vec3 d = pos;\n  d.y = 0.0;\n  float dist = length(d);\n\n  float cld = 0.;\n  if (mincloudheight < h && h < maxcloudheight) {\n    // cld = cloud(pos+vec3(t*1e3,0., t*1e3),t)*cloudy;\n    cld = cloud(pos + vec3(xaxiscloud, yaxiscloud, zaxiscloud), t) *\n          cloudy; // direction and speed the cloud movers\n    cld *= sin(3.1415 * (h - mincloudheight) / mincloudheight) * cloudy;\n  }\n#ifdef cloud2\n  float cld2 = 0.;\n  if (12e3 < h && h < 15.5e3) {\n    cld2 = fnoise(pos * 3e-4, t) *\n           cloud(pos * 32.0 + vec3(27612.3, 0., -t * 15e3), t);\n    cld2 *= sin(3.1413 * (h - 12e3) / 12e3) * cloudyhigh;\n    cld2 = clamp(cld2, 0.0, 1.0);\n  }\n\n#endif\n\n#if ORIG_CLOUD\n  if (dist < cloudfar) {\n    float factor =\n        clamp(1.0 - ((cloudfar - dist) / (cloudfar - cloudnear)), 0.0, 1.0);\n    cld *= factor;\n  }\n#else\n\n  if (dist > cloudfar) {\n\n    float factor =\n        clamp(1.0 - ((dist - cloudfar) / (cloudfar - cloudnear)), 0.0, 1.0);\n    cld *= factor;\n  }\n#endif\n\n  mie = exp(-h / Hm) + cld + haze;\n#ifdef cloud2\n  mie += cld2;\n#endif\n}\n\nfloat escape(in vec3 p, in vec3 d, in float R) {\n  vec3 v = p - C;\n  float b = dot(v, d);\n  float c = dot(v, v) - R * R;\n  float det2 = b * b - c;\n  if (det2 < 0.)\n    return -1.;\n  float det = sqrt(det2);\n  float t1 = -b - det, t2 = -b + det;\n  return (t1 >= 0.) ? t1 : t2;\n}\n\n// this can be explained:\n// http://www.scratchapixel.com/lessons/3d-advanced-lessons/simulating-the-colors-of-the-sky/atmospheric-scattering/\nvoid scatter(vec3 o, vec3 d, out vec3 col, out vec3 scat, in float t) {\n\n  float L = escape(o, d, Ra);\n  float mu = dot(d, Ds);\n  float opmu2 = 1. + mu * mu;\n  float phaseR = .0596831 * opmu2;\n  float phaseM = .1193662 * (1. - g2) * opmu2 /\n                 ((2. + g2) * pow(1. + g2 - 2. * g * mu, 1.5));\n  float phaseS = .1193662 * (1. - s2) * opmu2 /\n                 ((2. + s2) * pow(1. + s2 - 2. * s * mu, 1.5));\n\n  float depthR = 0., depthM = 0.;\n  vec3 R = vec3(0.), M = vec3(0.);\n\n  float dl = L / float(steps);\n  for (int i = 0; i < steps; ++i) {\n    float l = float(i) * dl;\n    vec3 p = (o + d * l);\n\n    float dR, dM;\n    densities(p, dR, dM);\n    dR *= dl;\n    dM *= dl;\n    depthR += dR;\n    depthM += dM;\n\n    float Ls = escape(p, Ds, Ra);\n    if (Ls > 0.) {\n      float dls = Ls / float(stepss);\n      float depthRs = 0., depthMs = 0.;\n      for (int j = 0; j < stepss; ++j) {\n        float ls = float(j) * dls;\n        vec3 ps = (p + Ds * ls);\n        float dRs, dMs;\n        densities(ps, dRs, dMs);\n        depthRs += dRs * dls;\n        depthMs += dMs * dls;\n      }\n\n      vec3 A = exp(-(bR * (depthRs + depthR) + bM * (depthMs + depthM)));\n      R += (A * dR);\n      M += A * dM;\n    } else {\n    }\n  }\n\n  // col = (I) * (R * bR * phaseR + M * bM * (phaseM ));\n  col = (I) * (M * bM * (phaseM)); // Mie scattering\n#if NICE_HACK_SUN\n  col += (SI) * (M * bM * phaseS); // Sun\n#endif\n  col += (I) * (R * bR * phaseR); // Rayleigh scattering\n  scat = 0.1 * (bM * depthM);\n  // scat = 0.0 + clamp(depthM*5e-7,0.,1.);\n}\n\nvec3 hash33(vec3 p) {\n  p = fract(p * vec3(443.8975, 397.2973, 491.1871));\n  p += dot(p.zxy, p.yxz + 19.27);\n  return fract(vec3(p.x * p.y, p.z * p.x, p.y * p.z));\n}\n\nvec3 stars(in vec3 p) {\n  vec3 c = vec3(0.);\n  float res = iResolution.x * 2.5;\n\n  for (float i = 0.; i < 4.; i++) {\n    vec3 q = fract(p * (.15 * res)) - 0.5;\n    vec3 id = floor(p * (.15 * res));\n    vec2 rn = hash33(id).xy;\n    float c2 = 1. - smoothstep(0., .6, length(q));\n    c2 *= step(rn.x, .0005 + i * i * 0.001);\n    c +=\n        c2 * (mix(vec3(1.0, 0.49, 0.1), vec3(0.75, 0.9, 1.), rn.y) * 0.1 + 0.9);\n    p *= 1.3;\n  }\n  return c * c * .8;\n}\n\n// SIMPLE SUN STUFF\nconst float density = 0.5;\nconst float zenithOffset = 0.48;\nconst vec3 skyColor = vec3(0.37, 0.55, 1.0) * (1.0 + 0.0);\n\n#define zenithDensity(x) density / pow(max(x - zenithOffset, 0.0035), 0.75)\n\nfloat getSunPoint(vec2 p, vec2 lp) {\n  return smoothstep(0.04 * (fov / 2.0), 0.026 * (fov / 2.0), distance(p, lp)) *\n         50.0;\n}\n\nfloat getMie(vec2 p, vec2 lp) {\n  float mytest = lp.y < 0.5 ? (lp.y + 0.5) * pow(0.05, 20.0) : 0.05;\n  float disk = clamp(1.0 - pow(distance(p, lp), mytest), 0.0, 1.0);\n  return disk * disk * (3.0 - 2.0 * disk) * 0.25 * PI;\n}\n\nvec3 getSkyAbsorption(vec3 x, float y) {\n  vec3 absorption = x * y;\n  absorption = pow(absorption, 1.0 - (y + absorption) * 0.5) / x / y;\n  return absorption;\n}\n\nvec3 jodieReinhardTonemap(vec3 c) {\n  float l = dot(c, vec3(0.2126, 0.7152, 0.0722));\n  vec3 tc = c / (c + 1.0);\n  return mix(c / (l + 1.0), tc, tc);\n}\n\nvec3 getAtmosphericScattering(vec2 p, vec2 lp) {\n  float zenithnew = zenithDensity(p.y);\n  float sunPointDistMult =\n      clamp(length(max(lp.y + 0.1 - zenithOffset, 0.0)), 0.0, 1.0);\n  vec3 absorption = getSkyAbsorption(skyColor, zenithnew);\n  vec3 sunAbsorption = getSkyAbsorption(skyColor, zenithDensity(lp.y + 0.1));\n  vec3 sun3 = getSunPoint(p, lp) * absorption;\n  vec3 mie2 = getMie(p, lp) * sunAbsorption;\n  vec3 totalSky = sun3; //+ mie2;\n  totalSky *= sunAbsorption * 0.5 + 0.5 * length(sunAbsorption);\n  vec3 newSky = jodieReinhardTonemap(totalSky);\n  return newSky;\n}\n// END SIMPLE SUN STUFF\n\n// RAIN STUFF\nvec3 N31(float p) {\n  //  3 out, 1 in... DAVE HOSKINS\n  vec3 p3 = fract(vec3(p) * vec3(.1031, .11369, .13787));\n  p3 += dot(p3, p3.yzx + 19.19);\n  return fract(\n      vec3((p3.x + p3.y) * p3.z, (p3.x + p3.z) * p3.y, (p3.y + p3.z) * p3.x));\n}\n\nfloat SawTooth(float t) {\n  return cos(t + cos(t)) + sin(2. * t) * .2 + sin(4. * t) * .02;\n}\n\nfloat DeltaSawTooth(float t) {\n  return 0.4 * cos(2. * t) + 0.08 * cos(4. * t) -\n         (1. - sin(t)) * sin(t + cos(t));\n}\n\nvec2 GetDrops(vec2 uv, float seed, float m) {\n\n  float t2 = t + m;\n  vec2 o = vec2(0.);\n\n#ifndef DROP_DEBUG\n  uv.y += t2 * .05;\n#endif\n\n  uv *= vec2(10., 2.5) * 2.;\n  vec2 id = floor(uv);\n  vec3 n = N31(id.x + (id.y + seed) * 546.3524);\n  vec2 bd = fract(uv);\n\n  vec2 uv2 = bd;\n\n  bd -= 0.5;\n\n  bd.y *= 4.;\n\n  bd.x += (n.x - .5) * rainy;\n\n  t2 += n.z * 6.28;\n  float slide = SawTooth(t2);\n\n  float ts = 1.5;\n  vec2 trailPos = vec2(bd.x * ts, (fract(bd.y * ts * 2. - t2 * 2.) - .5) * .5);\n\n  bd.y += slide * 2.; // make drops slide down\n\n#ifdef HIGH_QUALITY\n  float dropShape = bd.x * bd.x;\n  dropShape *= DeltaSawTooth(t);\n  bd.y += dropShape; // change shape of drop when it is falling\n#endif\n\n  float d = length(bd); // distance to main drop\n\n  float trailMask = S(-.2, .2, bd.y); // mask out drops that are below the main\n  trailMask *= bd.y;                  // fade dropsize\n  float td = length(trailPos * max(.5, trailMask)); // distance to trail drops\n\n  float mainDrop = S(.2, .1, d);\n  float dropTrail = S(.1, .02, td);\n\n  dropTrail *= trailMask;\n  o = mix(bd * mainDrop, trailPos, dropTrail); // mix main drop and drop trail\n\n#ifdef DROP_DEBUG\n  if (uv2.x < .02 || uv2.y < .01)\n    o = vec2(1.);\n#endif\n\n  return o;\n}\n// END RAIN STUFF\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n  float AR = iResolution.x / iResolution.y;\n  //   float YAR = iResolution.y / iResolution.x;\n  //   float SAR = min(AR, YAR);\n  //   float BAR = max(AR, YAR);\n  //   float smallSide = min(iResolution.x, iResolution.y);\n  //   float bigSide = max(iResolution.x, iResolution.y);\n  float M = 1.0; // canvas.innerWidth/M //canvas.innerHeight/M --res\n  vec2 sunPos = vec2(sin(-gameTime * PI2), cos(gameTime * PI2)) * 0.5;\n  sunPos.x += AR * 0.5;\n  if (sunPos.y < 0.) {\n    sunPos.y = sunPos.y / 4.;\n  }\n  sunPos.y += 0.5;\n\n  // circle = vec2(sin(gameTime*PI2));\n  vec2 uvMouse = sunPos;\n  // / iResolution.xy);\n  // uvMouse.x *= AR;\n\n  vec2 uv0 = (fragCoord.xy / iResolution.xy);\n  uv0 *= M;\n  // uv0.x *= AR;\n\n  vec2 uv = uv0 * (2.0 * M) - (1.0 * M);\n  uv.x *= AR;\n\n  // uvMouse.y=(0.7-(0.05*fov)); //initial view\n  // uvMouse.x=(1.0-(0.05*fov)); //initial view\n  // circle+=0.5;\n  // uvMouse.xy = circle - vec2((0.05*fov));\n  // uvMouse.xy = vec2(1.0, 0.5);\n  // uvMouse*= 100.;\n  // uvMouse += iResolution.xy *0.5;\n  Ds = normalize(vec3(uvMouse.x - ((0.5 * AR)), uvMouse.y - 0.5, (fov / -2.0)));\n\n  vec3 O = vec3(0., cameraheight, 0.);\n  vec3 D = normalize(vec3(uv, -(fov * M)));\n\n  vec3 color = vec3(0.);\n  vec3 scat = vec3(0.);\n\n  // float scat = 0.;\n  float att = 1.;\n  float staratt = 1.;\n  float scatatt = 1.;\n  vec3 star = vec3(0.);\n  vec4 aur = vec4(0.);\n\n  float fade = smoothstep(0., 0.01, abs(D.y)) * 0.5 + 0.6;\n\n  staratt = 1. - min(1.0, (uvMouse.y * 2.0));\n  scatatt = 1. - min(1.0, (uvMouse.y * 2.2));\n\n  if (D.y < -ts) {\n    float L = -O.y / D.y;\n    O = O + D * L;\n    D.y = -D.y;\n    D = normalize(\n        D +\n        vec3(0, .003 * sin(t + 6.2831 * noise(O.xz + vec2(0., -t * 1e3))), 0.));\n    att = .6;\n    star = stars(D);\n    uvMouse.y < 0.5 ? aur = smoothstep(0.0, 2.5, aurora(O, D)) : aur = aur;\n  } else {\n    float L1 = O.y / D.y;\n    vec3 O1 = O + D * L1;\n\n    vec3 D1 = vec3(1.);\n    D1 = normalize(\n        D + vec3(1.,\n                 0.0009 * sin(t + 6.2831 * noise(O1.xz + vec2(0., t * 0.8))),\n                 0.));\n    star = stars(D1);\n    uvMouse.y < 0.5 ? aur = smoothstep(0., 1.5, aurora(O, D)) *fade : aur = aur;\n  }\n\n  star *= att;\n  star *= staratt;\n\n  scatter(O, D, color, scat, t);\n  color *= att;\n  scat *= att;\n  scat *= scatatt;\n\n// draw the badly implemented sun\n#if SIMPLE_SUN\n\n  vec2 uv1 = (fragCoord.xy / iResolution.xy);\n  uv1 *= M;\n  uv1.x *= AR;\n\n  vec3 sun2 = getAtmosphericScattering(uv1, vec2(uvMouse.x, uvMouse.y));\n  color += sun2;\n#endif\n\n  color += scat;\n  color += star;\n  //   color=color*(1.-(aur.a)*scatatt) + (aur.rgb*scatatt);\n  color += aur.rgb * scatatt;\n\n#if ENABLE_RAIN\n  vec2 drops = vec2(0.);\n  if (rainmulti > 1.0) {\n    drops = GetDrops(uv / 2.0, 1., 1.);\n\n    color += drops.x + drops.y;\n  }\n#endif\n\n  // float env = pow( smoothstep(.5, iResolution.x / iResolution.y,\n  // length(uv*0.8)), 0.0);\n  fragColor = vec4(pow(color, vec3(1.0 / 2.2)), 1.); // gamma correct\n}\nvoid main() {\n  vec4 color = vec4(0.0);\n  mainImage(color, gl_FragCoord.xy);\n  gl_FragColor = color;\n}\n"}]]);
//# sourceMappingURL=1.baf7a093a5e71e99e476.js.map