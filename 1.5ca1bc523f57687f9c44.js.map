{"version":3,"sources":["webpack:///./js/render.js","webpack:///./js/plot.js","webpack:///./js/fps.js","webpack:///./js/tchotchkes.js","webpack:///./js/paint.js","webpack:///./js/components/info.js","webpack:///./js/components/menu.js","webpack:///./js/components/ui.js","webpack:///./js/app.js","webpack:///./js/shaderToy.js","webpack:///./js/index.js","webpack:///./crate/pkg/sandtable.js","webpack:///./js/glsl/sandVertex.glsl","webpack:///./assets/bubblebig.png","webpack:///./assets/bubblemed.png","webpack:///./assets/bubblesmall.png","webpack:///./js/glsl/sand.glsl","webpack:///./js/glsl/plot.glsl","webpack:///./tchotchkes sync nonrecursive \\.(ico)$","webpack:///./tchotchkes/100.ico","webpack:///./tchotchkes/8ball.ico","webpack:///./tchotchkes/TV.ico","webpack:///./tchotchkes/alien2.ico","webpack:///./tchotchkes/anchor.ico","webpack:///./tchotchkes/apple.ico","webpack:///./tchotchkes/armchair.ico","webpack:///./tchotchkes/ball.ico","webpack:///./tchotchkes/banana.ico","webpack:///./tchotchkes/bart.ico","webpack:///./tchotchkes/baseball.ico","webpack:///./tchotchkes/bee.ico","webpack:///./tchotchkes/bone.ico","webpack:///./tchotchkes/bow.ico","webpack:///./tchotchkes/bust.ico","webpack:///./tchotchkes/cactus.ico","webpack:///./tchotchkes/camera.ico","webpack:///./tchotchkes/carrot.ico","webpack:///./tchotchkes/castle.ico","webpack:///./tchotchkes/castle2.ico","webpack:///./tchotchkes/caution.ico","webpack:///./tchotchkes/chair.ico","webpack:///./tchotchkes/chamomile.ico","webpack:///./tchotchkes/cherry.ico","webpack:///./tchotchkes/cherryblossom.ico","webpack:///./tchotchkes/coin.ico","webpack:///./tchotchkes/computer.ico","webpack:///./tchotchkes/controller.ico","webpack:///./tchotchkes/crown.ico","webpack:///./tchotchkes/crucifix.ico","webpack:///./tchotchkes/cube.ico","webpack:///./tchotchkes/cubeblue.ico","webpack:///./tchotchkes/cursor.ico","webpack:///./tchotchkes/dead.ico","webpack:///./tchotchkes/dice2.ico","webpack:///./tchotchkes/dinoegg.ico","webpack:///./tchotchkes/disc.ico","webpack:///./tchotchkes/dna.ico","webpack:///./tchotchkes/dollar.ico","webpack:///./tchotchkes/donut.ico","webpack:///./tchotchkes/earth.ico","webpack:///./tchotchkes/egg.ico","webpack:///./tchotchkes/eiffel.ico","webpack:///./tchotchkes/elephant.ico","webpack:///./tchotchkes/eyeball.ico","webpack:///./tchotchkes/flower.ico","webpack:///./tchotchkes/folder.ico","webpack:///./tchotchkes/gameboy.ico","webpack:///./tchotchkes/gem1.ico","webpack:///./tchotchkes/gem2.ico","webpack:///./tchotchkes/glasses3d.ico","webpack:///./tchotchkes/grave.ico","webpack:///./tchotchkes/heartPastel.ico","webpack:///./tchotchkes/heel.ico","webpack:///./tchotchkes/herb.ico","webpack:///./tchotchkes/hibiscus.ico","webpack:///./tchotchkes/horse.ico","webpack:///./tchotchkes/ipad.ico","webpack:///./tchotchkes/itunes.ico","webpack:///./tchotchkes/jasmineflower.ico","webpack:///./tchotchkes/key.ico","webpack:///./tchotchkes/keys.ico","webpack:///./tchotchkes/lemon.ico","webpack:///./tchotchkes/lighter.ico","webpack:///./tchotchkes/lips.ico","webpack:///./tchotchkes/marble.ico","webpack:///./tchotchkes/mess.ico","webpack:///./tchotchkes/mic.ico","webpack:///./tchotchkes/moon.ico","webpack:///./tchotchkes/mouse.ico","webpack:///./tchotchkes/mug.ico","webpack:///./tchotchkes/music.ico","webpack:///./tchotchkes/nasa.ico","webpack:///./tchotchkes/nautilus.ico","webpack:///./tchotchkes/officechair.ico","webpack:///./tchotchkes/onigiri.ico","webpack:///./tchotchkes/orb.ico","webpack:///./tchotchkes/palmtree.ico","webpack:///./tchotchkes/patrick.ico","webpack:///./tchotchkes/pawn.ico","webpack:///./tchotchkes/peach.ico","webpack:///./tchotchkes/pencil.ico","webpack:///./tchotchkes/pin.ico","webpack:///./tchotchkes/pineapple.ico","webpack:///./tchotchkes/pizza2.ico","webpack:///./tchotchkes/pokeball.ico","webpack:///./tchotchkes/pot.ico","webpack:///./tchotchkes/prideflag.ico","webpack:///./tchotchkes/ps2.ico","webpack:///./tchotchkes/pyramid.ico","webpack:///./tchotchkes/rainbow.ico","webpack:///./tchotchkes/ring.ico","webpack:///./tchotchkes/saturn.ico","webpack:///./tchotchkes/sauron.ico","webpack:///./tchotchkes/ship.ico","webpack:///./tchotchkes/sims.ico","webpack:///./tchotchkes/skull.ico","webpack:///./tchotchkes/sparkle.ico","webpack:///./tchotchkes/sparkleheart.ico","webpack:///./tchotchkes/spinner.ico","webpack:///./tchotchkes/squash.ico","webpack:///./tchotchkes/statue.ico","webpack:///./tchotchkes/sword.ico","webpack:///./tchotchkes/table.ico","webpack:///./tchotchkes/tombone.ico","webpack:///./tchotchkes/tooth.ico","webpack:///./tchotchkes/trans.ico","webpack:///./tchotchkes/transfer.ico","webpack:///./tchotchkes/trophy.ico","webpack:///./tchotchkes/umbrella.ico","webpack:///./tchotchkes/vlc.ico","webpack:///./tchotchkes/volleyball.ico","webpack:///./tchotchkes/whale.ico","webpack:///./tchotchkes/word.ico","webpack:///./tchotchkes/yin-yang.ico","webpack:///./assets/daphnia2.gif","webpack:///./js/setup.js","webpack:///./js/glsl/sky.glsl"],"names":["reglBuilder","require","GIF","window","memory","fsh","vsh","startWebGL","regl","canvas","universe","isSnapshot","gl","attributes","preserveDrawingBuffer","width","height","cell_pointer","cells","light_pointer","lights","sprite_pointer","sprite","Uint8Array","buffer","dataTexture","texture","data","lightTexture","spriteTexture","drawSand","blend","enable","func","srcRGB","srcAlpha","dstRGB","dstAlpha","equation","rgb","alpha","color","frag","uniforms","t","tick","resolution","viewportWidth","viewportHeight","dpi","vert","position","count","draw","poll","readingsIndex","document","getElementById","n_readings","readings","throttle","fps","this","frames","lastFrameTimeStamp","performance","now","delta","push","length","shift","min","Infinity","max","sum","i","Math","mean","textContent","round","r","icos","keys","map","icoToImage","url","fetch","then","res","ok","Error","statusText","arrayBuffer","ICO","parse","err","console","log","images","image","eventDistance","a","b","sqrt","pow","clientX","clientY","norm","mag","magnitude","scale","s","add","sub","painting","lastPaint","repeat","tryPlaceTchotchke","event","UI","state","selectedTchotchke","setState","tchotchkes","documentElement","style","cursor","convertEventCoordinates","x","y","place_sprite","upload","smoothPaint","clearInterval","setInterval","paint","startEvent","size","speciesSizes","selectedElement","Species","Fish","GoldFish","d","addEventListener","preventDefault","push_undo","body","cancelable","Array","from","touches","handleTouches","paused","forEach","Water","Sand","Air","Algae","Daphnia","Zoop","Seed","Bacteria","boundingRect","getBoundingClientRect","scaleX","ratio","ceil","devicePixelRatio","scaleY","canvasLeft","left","canvasTop","top","floor","Info","className","href","src","Menu","close","children","id","to","onClick","skiplist","species","pallette_data","createElement","Object","values","range","Universe","reset","render","ctx","getContext","readPixels","RGBA","UNSIGNED_BYTE","colors","index","pallette","randomRadius","n","random","organicRadius","OrganicButton","borderRadius","ElementButton","name","setElement","elementID","selected","key","background","backgroundColor","filter","Index","props","tutorialProgress","localStorage","getItem","submissionMenuOpen","ff","submitting","Set","dataURL","currentSubmission","setTimeout","prevProps","confirm","play","setItem","context","imgData","createImageData","putImageData","cellData","toDataURL","dataString","JSON","stringify","o2","spriteData","spriteDataString","date","Date","getMonth","getDate","currentDateString","findTchotchke","img","Image","onload","drawImage","getImageData","cellsData","parseInt","set_o2","canvas2","ctx2","img2","hash","activeSpecies","includes","toggleFF","viewBox","points","pathname","cb","w","h","gif","workers","quality","transparent","tmpc","tctx","set_time","clearRect","slice","reverse","frame","addFrame","delay","on","blob","URL","createObjectURL","exportGif","pause","closeMenu","display","Fragment","daphniaImg","bubblebig","React","Component","ReactDOM","path","component","exact","WebGL","canvasId","opts","stencil","premultipliedAlpha","textures","mIs20","WebGLRenderingContext","vertexShader","mDerivatives","mShaderTextureLOD","fragmentShader","getExtension","replace","shader","linkShader","vertexAttribute","getAttribLocation","enableVertexAttribArray","innerHeight","innerWidth","setAttribute","vertexBuffer","createVBO","running","time0","stride","vertexData","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","itemSize","numItems","vertexSource","fragmentSource","program","createProgram","attachShader","compileShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","showLogProgram","uniformLocation","getUniformLocation","shaderType","source","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","type","showLog","getTime","compilationLog","getShaderInfoLog","getProgramInfoLog","channelNumber","createTexture","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_FLIP_Y_WEBGL","texImage2D","c","concat","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","_start","timePreviousFrame","disable","DEPTH_TEST","viewport","useProgram","gameTime","time","channel","clear","DEPTH_BUFFER_BIT","vertexAttribPointer","FLOAT","activeTexture","TEXTURE0","uniform1i","uniform3f","uniform1f","drawArrays","TRIANGLE_STRIP","drawBowl","Glass","Wood","canvasSize","HUD","resize","screen_width","canvasStyle","HUDStyle","sky","webGL","sky_ratio","loadTexture","start","e","error","drawPlot","plotcanvas","max_readings","recordDataPoint","total_gas","u","renderLoop","max_tick_per_frame","dayTime","skyTime","animWebationId","requestAnimationFrame","load","heap","fill","undefined","heap_next","addHeapObject","obj","idx","getObject","takeObject","ret","dropObject","cachedTextDecoder","TextDecoder","cachegetUint8Memory","getStringFromWasm","ptr","len","decode","wasm","subarray","what","freeze","Stone","Plant","FishTail","GoldFishTail","Nitrogen","Waste","Bubble","Biofilm","Plastic","brightness","dx","dy","xi","yi","typebuf","v","create","prototype","__wrap","__wbindgen_object_drop_ref","arg0","__wbg_buffer_d31feadf69cb45fc","__wbg_length_b6e0c5630f641946","__wbg_new_ed7079cf157e44d5","__wbg_set_2aae8dbe165bf1a3","arg1","arg2","set","__wbg_random_09364f2d8647f133","__wbindgen_throw","__wbindgen_memory","module","exports","webpackContext","req","webpackContextResolve","__webpack_require__","o","code","resolve","timeout","classList","handleActivity","clearTimeout","remove"],"mappings":"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gBCA3CD,EAAOC,QAAU,IAA0B,yB,gBCA3CD,EAAOC,QAAU,IAA0B,0B,gBCA3CD,EAAOC,QAAU,IAA0B,0B,gBCA3CD,EAAOC,QAAU,IAA0B,wB,gBCA3CD,EAAOC,QAAU,IAA0B,4B,gBCA3CD,EAAOC,QAAU,IAA0B,yB,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,uB,gBCA3CD,EAAOC,QAAU,IAA0B,2B,gBCA3CD,EAAOC,QAAU,IAA0B,6B,gBCA3CD,EAAOC,QAAU,IAA0B,wB,gBCA3CD,EAAOC,QAAU,IAA0B,2B,gBCA3CD,EAAOC,QAAU,IAA0B,uB,gBCA3CD,EAAOC,QAAU,IAA0B,2B,gBCA3CD,EAAOC,QAAU,IAA0B,yB,gBCA3CD,EAAOC,QAAU,IAA0B,uB,gBCA3CD,EAAOC,QAAU,IAA0B,wB,gBCA3CD,EAAOC,QAAU,IAA0B,0B,gBCA3CD,EAAOC,QAAU,IAA0B,uB,gBCA3CD,EAAOC,QAAU,IAA0B,sB,gBCA3CD,EAAOC,QAAU,IAA0B,yB,gBCA3CD,EAAOC,QAAU,IAA0B,wB,gBCA3CD,EAAOC,QAAU,IAA0B,wB,gBCA3CD,EAAOC,QAAU,IAA0B,sB,gBCA3CD,EAAOC,QAAU,IAA0B,yB,gBCA3CD,EAAOC,QAAU,IAA0B,2B,gBCA3CD,EAAOC,QAAU,IAA0B,0B,gBCA3CD,EAAOC,QAAU,IAA0B,yB,gBCA3CD,EAAOC,QAAU,IAA0B,yB,gBCA3CD,EAAOC,QAAU,IAA0B,0B,gBCA3CD,EAAOC,QAAU,IAA0B,uB,gBCA3CD,EAAOC,QAAU,IAA0B,uB,gBCA3CD,EAAOC,QAAU,IAA0B,4B,gBCA3CD,EAAOC,QAAU,IAA0B,wB,gBCA3CD,EAAOC,QAAU,IAA0B,8B,gBCA3CD,EAAOC,QAAU,IAA0B,uB,gBCA3CD,EAAOC,QAAU,IAA0B,uB,gBCA3CD,EAAOC,QAAU,IAA0B,2B,gBCA3CD,EAAOC,QAAU,IAA0B,wB,gBCA3CD,EAAOC,QAAU,IAA0B,uB,gBCA3CD,EAAOC,QAAU,IAA0B,yB,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,sB,gBCA3CD,EAAOC,QAAU,IAA0B,uB,gBCA3CD,EAAOC,QAAU,IAA0B,wB,gBCA3CD,EAAOC,QAAU,IAA0B,0B,gBCA3CD,EAAOC,QAAU,IAA0B,uB,gBCA3CD,EAAOC,QAAU,IAA0B,yB,gBCA3CD,EAAOC,QAAU,IAA0B,uB,gBCA3CD,EAAOC,QAAU,IAA0B,sB,gBCA3CD,EAAOC,QAAU,IAA0B,uB,gBCA3CD,EAAOC,QAAU,IAA0B,wB,gBCA3CD,EAAOC,QAAU,IAA0B,sB,gBCA3CD,EAAOC,QAAU,IAA0B,wB,gBCA3CD,EAAOC,QAAU,IAA0B,uB,gBCA3CD,EAAOC,QAAU,IAA0B,2B,gBCA3CD,EAAOC,QAAU,IAA0B,8B,gBCA3CD,EAAOC,QAAU,IAA0B,0B,gBCA3CD,EAAOC,QAAU,IAA0B,sB,gBCA3CD,EAAOC,QAAU,IAA0B,2B,gBCA3CD,EAAOC,QAAU,IAA0B,0B,gBCA3CD,EAAOC,QAAU,IAA0B,uB,gBCA3CD,EAAOC,QAAU,IAA0B,wB,gBCA3CD,EAAOC,QAAU,IAA0B,yB,gBCA3CD,EAAOC,QAAU,IAA0B,sB,gBCA3CD,EAAOC,QAAU,IAA0B,4B,gBCA3CD,EAAOC,QAAU,IAA0B,yB,gBCA3CD,EAAOC,QAAU,IAA0B,2B,gBCA3CD,EAAOC,QAAU,IAA0B,sB,gBCA3CD,EAAOC,QAAU,IAA0B,4B,gBCA3CD,EAAOC,QAAU,IAA0B,sB,gBCA3CD,EAAOC,QAAU,IAA0B,0B,gBCA3CD,EAAOC,QAAU,IAA0B,0B,gBCA3CD,EAAOC,QAAU,IAA0B,uB,gBCA3CD,EAAOC,QAAU,IAA0B,yB,gBCA3CD,EAAOC,QAAU,IAA0B,yB,gBCA3CD,EAAOC,QAAU,IAA0B,uB,gBCA3CD,EAAOC,QAAU,IAA0B,uB,gBCA3CD,EAAOC,QAAU,IAA0B,wB,gBCA3CD,EAAOC,QAAU,IAA0B,0B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,0B,gBCA3CD,EAAOC,QAAU,IAA0B,yB,gBCA3CD,EAAOC,QAAU,IAA0B,yB,gBCA3CD,EAAOC,QAAU,IAA0B,wB,gBCA3CD,EAAOC,QAAU,IAA0B,wB,gBCA3CD,EAAOC,QAAU,IAA0B,0B,gBCA3CD,EAAOC,QAAU,IAA0B,wB,gBCA3CD,EAAOC,QAAU,IAA0B,wB,gBCA3CD,EAAOC,QAAU,IAA0B,2B,gBCA3CD,EAAOC,QAAU,IAA0B,yB,gBCA3CD,EAAOC,QAAU,IAA0B,2B,gBCA3CD,EAAOC,QAAU,IAA0B,sB,gBCA3CD,EAAOC,QAAU,IAA0B,6B,gBCA3CD,EAAOC,QAAU,IAA0B,wB,gBCA3CD,EAAOC,QAAU,IAA0B,uB,gBCA3CD,EAAOC,QAAU,IAA0B,2B,6BCA3CD,EAAOC,QAAU,IAA0B,uB,cCO3C,IAAI1Q,EAAa/J,SAASC,eAAe,cAErCgb,EAAUte,OAAOkO,YAAW,WAC1BlO,OAAOoH,GAAGC,MAAMoG,iBAAmB,GACrCpK,SAAS2F,KAAKuV,UAAU1X,IAAI,WAHf,KAOb2X,EAAiB,SAAA/E,GACnBzZ,OAAOye,aAAaH,GACpBjb,SAAS2F,KAAKuV,UAAUG,OAAO,SAC/BJ,EAAUte,OAAOkO,YAAW,WACtBlO,OAAOoH,GAAGC,MAAMoG,iBAAmB,GACrCpK,SAAS2F,KAAKuV,UAAU1X,IAAI,WAZjB,MAgBjBxD,SAAS2F,KAAKH,iBAAiB,YAAa2V,GAC5Cnb,SAAS2F,KAAKH,iBAAiB,aAAc2V,GAE7CpR,EAAWvE,iBAAiB,aAAa,SAAA4Q,GAClCzZ,OAAOsJ,QACNmQ,EAAExQ,YACJwQ,EAAE3Q,qB,cC9BR+U,EAAOC,QAAU","file":"1.5ca1bc523f57687f9c44.js","sourcesContent":["const reglBuilder = require(\"regl\");\nconst GIF = require(\"gif.js\");\n// const GIF = require(\"gl-gif\");\nimport { memory } from \"../crate/pkg/sandtable_bg\";\nwindow.memory = memory;\nimport { Species } from \"../crate/pkg/sandtable\";\nimport { Universe } from \"../crate/pkg\";\nimport { finished } from \"stream\";\n\nlet fsh = require(\"./glsl/sand.glsl\");\nlet vsh = require(\"./glsl/sandVertex.glsl\");\n\nlet startWebGL = ({ canvas, universe, isSnapshot = false, gl }) => {\n  let regl;\n  if (gl) {\n    regl = reglBuilder({\n      gl,\n      attributes: { preserveDrawingBuffer: isSnapshot }\n    });\n  } else {\n    regl = reglBuilder({\n      canvas,\n      attributes: { preserveDrawingBuffer: isSnapshot }\n    });\n  }\n  // const lastFrame = regl.texture();\n  const width = universe.width();\n  const height = universe.height();\n  let cell_pointer = universe.cells();\n  let light_pointer = universe.lights();\n  let sprite_pointer = universe.sprite();\n  let cells = new Uint8Array(memory.buffer, cell_pointer, width * height * 4);\n  let lights = new Uint8Array(memory.buffer, light_pointer, width * height * 4);\n  let sprite = new Uint8Array(\n    memory.buffer,\n    sprite_pointer,\n    width * height * 4\n  );\n  const dataTexture = regl.texture({ width, height, data: cells });\n  const lightTexture = regl.texture({ width, height, data: lights });\n  const spriteTexture = regl.texture({ width, height, data: sprite });\n\n  let drawSand = regl({\n    blend: {\n      enable: true,\n      func: {\n        srcRGB: \"src alpha\",\n        srcAlpha: 1,\n        dstRGB: \"one minus src alpha\",\n        dstAlpha: 1\n      },\n      equation: {\n        rgb: \"add\",\n        alpha: \"add\"\n      },\n      color: [0, 0, 0, 0]\n    },\n    frag: fsh,\n    uniforms: {\n      t: ({ tick }) => tick,\n      dataTexture: () => {\n        cell_pointer = universe.cells();\n        cells = new Uint8Array(memory.buffer, cell_pointer, width * height * 4);\n        return dataTexture({ width, height, data: cells });\n      },\n      lightTexture: () => {\n        light_pointer = universe.lights();\n\n        lights = new Uint8Array(\n          memory.buffer,\n          light_pointer,\n          width * height * 4\n        );\n\n        return lightTexture({ width, height, data: lights });\n      },\n      spriteTexture: () => {\n        sprite_pointer = universe.sprite();\n\n        sprite = new Uint8Array(\n          memory.buffer,\n          sprite_pointer,\n          width * height * 4\n        );\n\n        return spriteTexture({ width, height, data: sprite });\n      },\n      resolution: ({ viewportWidth, viewportHeight }) => [\n        viewportWidth,\n        viewportHeight\n      ],\n      dpi: 4,\n      isSnapshot\n      // backBuffer: lastFrame\n    },\n\n    vert: vsh,\n    attributes: {\n      // Full screen triangle\n      position: [[-1, 4], [-1, -1], [4, -1]]\n    },\n    // Our triangle has 3 vertices\n    count: 3\n  });\n\n  return {\n    regl,\n    draw: () => {\n      regl.poll();\n      drawSand();\n    }\n  };\n};\n\nlet snapshot = universe => {\n  let canvas = document.createElement(\"canvas\");\n  canvas.width = universe.width() / 2;\n  canvas.height = universe.height() / 2;\n  let render = startWebGL({ universe, canvas, isSnapshot: true });\n  render();\n\n  return canvas.toDataURL(\"image/png\");\n};\n\nlet exportGif = (universe, cb) => {\n  window.paused = true;\n\n  let canvas = document.createElement(\"canvas\");\n  canvas.width = universe.width() * 2;\n  canvas.height = universe.height() * 2;\n  let w = canvas.width;\n  let h = canvas.height;\n  // let gl = canvas.getContext(\"webgl\");\n\n  var gif = new GIF({\n    workers: 2,\n    quality: 10,\n    width: canvas.width,\n    height: canvas.height,\n    transparent: \"rgba(0,0,0,0)\"\n  });\n  let frames = [];\n\n  const tmpc = document.createElement(\"canvas\");\n  tmpc.width = w;\n  tmpc.height = h;\n  const tctx = tmpc.getContext(\"2d\");\n\n  frames = [];\n  let frameSize = { width: canvas.width, height: canvas.height };\n\n  const numFrames = 20;\n  let t = window.t;\n  for (var i = 0; i < numFrames; i++) {\n    universe.set_time((t / 50) % 255);\n    t += 5;\n    universe.tick();\n    canvas = document.createElement(\"canvas\");\n    canvas.width = universe.width() * 2;\n    canvas.height = universe.height() * 2;\n    let w = canvas.width;\n    let h = canvas.height;\n    let { regl, draw } = startWebGL({ universe, canvas, isSnapshot: false });\n\n    draw();\n    console.log(\"adding frame \" + i);\n    // gif.addFrame(gl, { copy: false });\n\n    // this is faster but the y-axis gets flipped\n    // let data = new ImageData(w, h);\n    // let pixels = new Uint8Array(data.data.buffer);\n    // regl.read(pixels);\n\n    // gl.readPixels(0, 0, w, h, gl.RGBA, gl.UNSIGNED_BYTE, pixels)\n\n    // var bytes = new Uint8Array(100)\n    // regl.read(bytes)\n\n    tctx.clearRect(0, 0, w, h);\n\n    tctx.drawImage(canvas, 0, 0);\n    const data = tctx.getImageData(0, 0, w, h);\n    frames.push(data);\n\n    // // don't lock up the ui\n    // if (i % 4 == 0) {\n    //     await nextTick()\n    // }\n  }\n  // console.log(frames);\n  //boomerang\n  frames = [...frames, ...frames.slice(0).reverse()];\n  for (const frame of frames) {\n    gif.addFrame(frame, { delay: 16 });\n  }\n\n  gif.on(\"finished\", function(blob) {\n    // window.open(URL.createObjectURL(blob));\n    cb(URL.createObjectURL(blob));\n  });\n  gif.render();\n  // const renderFrame = (n = 0) => {\n  //   console.log(n);\n\n  //   if (n == 20) {\n  //     console.log(\"finished!\");\n  //     gif.on(\"finished\", function(blob) {\n  //       window.open(URL.createObjectURL(blob));\n  //     });\n  //     gif.render();\n  //   } else {\n\n  //     renderFrame(n + 1);\n  //   }\n  // };\n  // renderFrame();\n  window.paused = false;\n};\n\nlet pallette = () => {\n  let canvas = document.createElement(\"canvas\");\n\n  let species = Object.values(Species);\n  let range = Math.max(...species) + 1;\n  let universe = Universe.new(range, 1);\n  canvas.width = range;\n  canvas.height = 3;\n  universe.reset();\n\n  species.forEach(id => universe.paint(id, 0, 2, id));\n  universe.paint(species.Air, 0, 2, species.Air);\n  let render = startWebGL({ universe, canvas, isSnapshot: true }).draw;\n  render();\n  let ctx = canvas.getContext(\"webgl\");\n  let data = new Uint8Array(range * 4);\n  ctx.readPixels(0, 0, range, 1, ctx.RGBA, ctx.UNSIGNED_BYTE, data);\n  let colors = {};\n  species.forEach(id => {\n    let index = id * 4;\n    let color = `rgba(${data[index]},${data[index + 1]}, ${\n      data[index + 2]\n    }, 1.0)`;\n    colors[id] = color;\n  });\n  return colors;\n};\n\nexport { startWebGL, snapshot, pallette, exportGif };\n","const reglBuilder = require(\"regl\");\n// import { memory } from \"../crate/pkg/sandtable_bg\";\n// window.memory = memory;\n// import { Species } from \"././crate/pkg/sandtable\";\n// import { Universe } from \"../crate/pkg\";\n\nlet fsh = require(\"./glsl/plot.glsl\");\nlet vsh = require(\"./glsl/sandVertex.glsl\");\nlet label = document.getElementById(\"plot-label\");\n\nlet readingsIndex = 0;\nlet n_readings = 0;\nlet max_readings = 60 * 3;\nlet readings = new Uint8Array(max_readings);\nlet throttle = 0;\nlet startPlotter = ({ canvas, universe }) => {\n  const regl = reglBuilder({\n    canvas\n  });\n  const width = max_readings / 4;\n  const height = 1;\n\n  const dataTexture = regl.texture({\n    width,\n    height,\n    data: readings\n  });\n  let recordDataPoint = () => {\n    if (throttle++ != 0) {\n      throttle = throttle % (20 * 4);\n      return;\n    }\n    readings[readingsIndex] = (255 * universe.o2()) / universe.total_gas();\n    readingsIndex = (readingsIndex + 1) % max_readings;\n    n_readings = Math.max(readingsIndex, n_readings);\n    let p = (n_readings * 100) / max_readings;\n    // canvas.style = `transform: translateX(${p - 100}%)`;\n    // label.style = `transform: translateX(${p - 100}%)`;\n  };\n  let drawPlot = regl({\n    blend: {\n      enable: true,\n      func: {\n        srcRGB: \"src alpha\",\n        srcAlpha: 1,\n        dstRGB: \"one minus src alpha\",\n        dstAlpha: 1\n      },\n      equation: {\n        rgb: \"add\",\n        alpha: \"add\"\n      },\n      color: [0, 0, 0, 0]\n    },\n    frag: fsh,\n    uniforms: {\n      t: ({ tick }) => tick,\n      i: () => readingsIndex,\n      n_readings: () => n_readings,\n      max_readings,\n      data: () => {\n        // console.log(readings);\n        return dataTexture({\n          width,\n          height,\n          data: readings\n        });\n      },\n\n      resolution: ({ viewportWidth, viewportHeight }) => [\n        viewportWidth,\n        viewportHeight\n      ],\n      dpi: 4\n    },\n\n    vert: vsh,\n    attributes: {\n      // Full screen triangle\n      position: [[-1, 4], [-1, -1], [4, -1]]\n    },\n    // Our triangle has 3 vertices\n    count: 3\n  });\n\n  return {\n    drawPlot: () => {\n      regl.poll();\n      drawPlot();\n    },\n    recordDataPoint\n  };\n};\n\nexport { startPlotter };\n","const fps = new (class {\n  constructor() {\n    this.fps = document.getElementById(\"fps\");\n    this.frames = [];\n    this.lastFrameTimeStamp = performance.now();\n  }\n\n  render() {\n    // Convert the delta time since the last frame render into a measure\n    // of frames per second.\n    const now = performance.now();\n    const delta = now - this.lastFrameTimeStamp;\n    this.lastFrameTimeStamp = now;\n    const fps = (1 / delta) * 1000;\n\n    // Save only the latest 100 timings.\n    this.frames.push(fps);\n    if (this.frames.length > 30) {\n      this.frames.shift();\n    }\n\n    // Find the max, min, and mean of our 100 latest timings.\n    let min = Infinity;\n    let max = -Infinity;\n    let sum = 0;\n    for (let i = 0; i < this.frames.length; i++) {\n      sum += this.frames[i];\n      min = Math.min(this.frames[i], min);\n      max = Math.max(this.frames[i], max);\n    }\n    let mean = sum / this.frames.length;\n\n    // Render the statistics.\n    this.fps.textContent = `FPS:${Math.round(mean)}`;\n    // O2: ${window.u.O2() / 1000}\n    // CO2: ${window.u.CO2() / 1000}`;\n  }\n})();\n\nexport { fps };\n","import ICO from \"icojs/browser\";\n\nfunction importAll(r) {\n  return r.keys().map(r);\n}\nconst icos = importAll(require.context(\"../tchotchkes\", false, /\\.(ico)$/));\nfunction randomIco() {\n  let i = Math.random() * icos.length;\n  return icos[i | 0];\n}\n// console.log(icos);\n// let images = [];\nconst icoToImage = url =>\n  fetch(url)\n    .then(res => {\n      if (!res.ok) {\n        throw Error(res.statusText);\n      }\n      return res.arrayBuffer();\n    }) // Gets the response and returns it as a blob\n    // Gets the response and returns it as a blob\n    .then(function(buffer) {\n      return ICO.parse(buffer).catch(err => {\n        console.log(err + url);\n      });\n    })\n    .then(function(images) {\n      let image = images[0];\n      // console.dir(image);\n      images.push(image);\n\n      return image;\n    });\n\nfunction getTchotchkes() {\n  return Promise.all(icos.map(icoToImage)).then(function(values) {\n    // console.log(values);\n    return values;\n  });\n}\n\nexport { getTchotchkes, icos, icoToImage, randomIco };\n","import { height, universe, width, ratio } from \"./index.js\";\nimport { icoToImage } from \"./tchotchkes\";\n\nimport { Species } from \"../crate/pkg\";\n\nconst canvas = document.getElementById(\"sand-canvas\");\n\nconst eventDistance = (a, b) => {\n  return Math.sqrt(\n    Math.pow(a.clientX - b.clientX, 2) + Math.pow(a.clientY - b.clientY, 2),\n    2\n  );\n};\n\nconst magnitude = a => {\n  return Math.sqrt(Math.pow(a.clientX, 2) + Math.pow(a.clientY, 2), 2);\n};\n\nconst norm = a => {\n  let mag = magnitude(a);\n  return { clientX: a.clientX / mag, clientY: a.clientY / mag };\n};\nconst scale = (a, s) => {\n  return { clientX: a.clientX * s, clientY: a.clientY * s };\n};\nconst add = (a, b) => {\n  return { clientX: a.clientX + b.clientX, clientY: a.clientY + b.clientY };\n};\nconst sub = (a, b) => {\n  return { clientX: a.clientX - b.clientX, clientY: a.clientY - b.clientY };\n};\n\nlet painting = false;\nlet lastPaint = null;\nlet repeat = null;\nfunction tryPlaceTchotchke(event) {\n  let url = window.UI.state.selectedTchotchke;\n  if (url) {\n    window.UI.setState(({ tchotchkes }) => {\n      tchotchkes.delete(url);\n      document.documentElement.style.cursor = `default`;\n      return { tchotchkes, selectedTchotchke: null };\n    });\n    const [x, y] = convertEventCoordinates(event);\n\n    icoToImage(url).then(image => {\n      universe.place_sprite(x - 8, y - 8, image.data);\n      window.UI.upload();\n    });\n    return true;\n  } else return false;\n}\ncanvas.addEventListener(\"mousedown\", event => {\n  event.preventDefault();\n  if (tryPlaceTchotchke(event)) {\n    return;\n  }\n  universe.push_undo();\n\n  painting = true;\n  clearInterval(repeat);\n  repeat = window.setInterval(() => paint(event), 100);\n  paint(event);\n  lastPaint = event;\n});\n\ndocument.body.addEventListener(\"mouseup\", event => {\n  clearInterval(repeat);\n  if (painting) {\n    event.preventDefault();\n    lastPaint = null;\n    painting = false;\n  }\n});\n\ncanvas.addEventListener(\"mousemove\", event => {\n  clearInterval(repeat);\n  smoothPaint(event);\n});\n\ncanvas.addEventListener(\"mouseleave\", event => {\n  clearInterval(repeat);\n  lastPaint = null;\n});\n\ncanvas.addEventListener(\"touchstart\", event => {\n  if (event.cancelable) {\n    event.preventDefault();\n  }\n  let touches = Array.from(event.touches);\n  if (tryPlaceTchotchke(touches[0])) {\n    return;\n  }\n  universe.push_undo();\n\n  painting = true;\n  lastPaint = event;\n  handleTouches(event);\n});\n\ncanvas.addEventListener(\"touchend\", event => {\n  if (event.cancelable) {\n    event.preventDefault();\n  }\n  lastPaint = null;\n  painting = false;\n  clearInterval(repeat);\n});\n\ncanvas.addEventListener(\"touchmove\", event => {\n  if (!window.paused) {\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n  }\n  clearInterval(repeat);\n  handleTouches(event);\n});\n\nfunction smoothPaint(event) {\n  clearInterval(repeat);\n  repeat = window.setInterval(() => paint(event), 100);\n  let startEvent = { clientX: event.clientX, clientY: event.clientY };\n  if (!painting) {\n    return;\n  }\n  let size = speciesSizes[window.UI.state.selectedElement] || 2;\n\n  let i = 0;\n  paint(startEvent);\n  if (\n    lastPaint &&\n    window.UI.state.selectedElement != Species.Fish &&\n    window.UI.state.selectedElement != Species.GoldFish\n  ) {\n    while (eventDistance(startEvent, lastPaint) > size / 3) {\n      let d = eventDistance(startEvent, lastPaint);\n      startEvent = add(\n        startEvent,\n        scale(norm(sub(lastPaint, event)), Math.min(size / 3, d))\n      );\n      i++;\n      if (i > 1000) {\n        break;\n      }\n      paint(startEvent);\n    }\n  }\n  lastPaint = event;\n}\n\nconst handleTouches = event => {\n  let touches = Array.from(event.touches);\n  if (touches.length == 1) {\n    smoothPaint(touches[0]);\n  } else {\n    touches.forEach(paint);\n  }\n};\n\nlet speciesSizes = {\n  [Species.Water]: 13,\n  [Species.Sand]: 8,\n  [Species.Air]: 7,\n\n  [Species.Algae]: 2,\n  [Species.Fish]: 2,\n  [Species.GoldFish]: 2,\n  [Species.Daphnia]: 2,\n  [Species.Zoop]: 2,\n  [Species.Seed]: 2,\n  [Species.Bacteria]: 2\n};\nfunction convertEventCoordinates(event) {\n  const boundingRect = canvas.getBoundingClientRect();\n\n  const scaleX =\n    canvas.width /\n    (ratio * Math.ceil(window.devicePixelRatio)) /\n    boundingRect.width;\n  const scaleY =\n    canvas.height /\n    (ratio * Math.ceil(window.devicePixelRatio)) /\n    boundingRect.height;\n\n  const canvasLeft = (event.clientX - boundingRect.left) * scaleX;\n  const canvasTop = (event.clientY - boundingRect.top) * scaleY;\n\n  const x = Math.min(Math.floor(canvasLeft), width - 1);\n  const y = Math.min(Math.floor(canvasTop), height - 1);\n  return [x, y];\n}\nconst paint = event => {\n  if (!painting) {\n    return;\n  }\n  const [x, y] = convertEventCoordinates(event);\n  if (window.UI.state.selectedElement < 0) return;\n\n  let size = speciesSizes[window.UI.state.selectedElement] || 3;\n  universe.paint(x, y, size, window.UI.state.selectedElement);\n};\n","import React from \"react\";\n// import daphniaImg from \"../../assets/daphnia.gif\";\nimport bubblebig from \"../../assets/bubblebig.png\";\nimport bubblemed from \"../../assets/bubblemed.png\";\nimport bubblesmall from \"../../assets/bubblesmall.png\";\n\nconst Info = () => {\n  return (\n    <div className=\"Info\">\n      <h1>A sealed ecosystem simulation </h1>\n      <hr></hr>\n      <hr></hr>\n      <p>\n        Welcome to orb.farm! This is a virtual ecosystem where different species\n        of creature can live, grow and die as part of a self-contained food\n        chain. Please play, explore, and observe!\n      </p>\n      <p>\n        Created by <a href=\"https://maxbittker.com\">max bittker</a>\n      </p>\n      <p>\n        Source code & Bug reports:{\" \"}\n        <a href=\"https://github.com/MaxBittker/jar\">\n          github.com/maxbittker/jar\n        </a>\n      </p>\n      <p>\n        See also: <a href=\"https://sandspiel.club\">sandspiel.club</a>\n      </p>{\" \"}\n      <hr></hr>\n      <hr></hr>\n      <div className=\"species-info\">\n        <span>\n          <h1>Air:</h1>\n          <p>Mostly used to erase things.</p>\n          <hr></hr>\n        </span>\n        <span>\n          <h1>Glass:</h1>\n          <p>Lets in light, seals in flavor.</p>\n          <hr></hr>\n        </span>\n        <span>\n          <h1>Sand:</h1>\n          <p>Important nutrient vector for plants. Plant seeds in this.</p>\n          <hr></hr>\n        </span>\n        <span>\n          <h1>Stone:</h1>\n          <p>Draw archways and castle. Aquascaping is a noble cause.</p>\n          <hr></hr>\n        </span>\n        <span>\n          <h1>Wood:</h1>\n          <p>\n            Driftwood adds natural decorative flare and provides a place for\n            fish to hide.\n          </p>\n        </span>\n        <hr></hr>\n        <span>\n          <h1>Water:</h1>\n          <p>A classic. Doesn't get better than this.</p>\n          <hr></hr>\n        </span>\n        <span>\n          <h1>Algae:</h1>\n          <p>\n            Photosynthesizes sunlight to produce nutrients and oxygen. Life of\n            the party!\n          </p>\n        </span>\n        <hr></hr>\n        <span>\n          <h1>Daphnia:</h1>\n          <p>\n            Also know as water fleas, these freshwater zooplankton are important\n            parts of the ecosystem. They feed on algae and lay eggs! More active\n            at night.\n          </p>\n          <hr></hr>\n        </span>\n\n        <span>\n          <h1>Seed:</h1>\n          <p>\n            Grows into eel grass, which is a source of food and oxygen. Needs to\n            pull nutrients from sand in order to grow!\n          </p>\n          <hr></hr>\n        </span>\n\n        <span>\n          <h1>Bacteria:</h1>\n          <p>\n            Helps break down waste into fertilizer. Decomposers are very\n            important parts to a functioning ecosystem. Blows bubbles when\n            happy.\n          </p>\n          <hr></hr>\n        </span>\n\n        <span>\n          <h1>Fish:</h1>\n          <p>\n            They feed mostly on daphnia but will also feed on the biofilm that\n            grows on plants. I can't tell what they're thinking.\n          </p>\n          <hr></hr>\n        </span>\n\n        <span>\n          <h1>Gold Fish:</h1>\n          <p>Loyal but simple minded.</p>\n        </span>\n      </div>\n      <hr></hr>\n      <h1> Credits:</h1>\n      <p>\n        Daphnia Art:{\" \"}\n        <a href=\"https://twitter.com/aconfuseddragon\">aconfuseddragon</a>\n      </p>\n      <p>Font: PixelMix by Andrew Tyler</p>\n      <p>\n        Background Art:\n        <a href=\"https://www.shadertoy.com/view/tdSXzD\">\n          \"The sun, the sky and the clouds\"\n        </a>{\" \"}\n        by stilltravelling\n      </p>\n      <p>\n        <img src=\"https://camo.githubusercontent.com/93105325a463894a90f70acf42eb79761f85567e/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f642f64642f466f6f6457656253696d706c652e6a70672f37323170782d466f6f6457656253696d706c652e6a7067\" />\n      </p>\n    </div>\n  );\n};\n\nexport default Info;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Menu = ({ close, children }) => {\n  return (\n    <div className=\"welcome-scrim\">\n      <div id={\"welcome\"}>\n        {children}\n        <Link to=\"/\" className=\"x\" onClick={close}>\n          <button> x</button>\n        </Link>\n      </div>\n    </div>\n  );\n};\nexport default Menu;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { memory } from \"../../crate/pkg/sandtable_bg\";\nimport { Species } from \"../../crate/pkg/sandtable\";\n\nimport { height, universe, width, reset } from \"../index.js\";\nimport { exportGif, pallette } from \"../render.js\";\nimport Menu from \"./menu.js\";\nimport { icos, randomIco } from \"../tchotchkes\";\nimport daphniaImg from \"../../assets/daphnia2.gif\";\nimport bubblebig from \"../../assets/bubblebig.png\";\nimport bubblemed from \"../../assets/bubblemed.png\";\nimport bubblesmall from \"../../assets/bubblesmall.png\";\n\nlet skiplist = [\"FishTail\", \"Biofilm\", \"GoldFishTail\"];\n// skiplist.push(\"Waste\");\nskiplist.push(\"Bubble\");\nskiplist.push(\"Plant\");\nskiplist.push(\"Zoop\");\nskiplist.push(\"Nitrogen\");\nskiplist.push(\"Plastic\");\n\nwindow.species = Species;\nlet pallette_data = pallette();\n\nfunction randomRadius(n = 8) {\n  return n + Math.random() * n * 2;\n}\nfunction organicRadius() {\n  return `\n  ${randomRadius()}px\n  ${randomRadius()}px\n  ${randomRadius()}px\n  ${randomRadius()}px\n  /\n  ${randomRadius()}px\n  ${randomRadius()}px\n  ${randomRadius()}px\n  ${randomRadius()}px\n  `;\n}\nconst OrganicButton = ({ onClick, className, children }) => {\n  return (\n    <button\n      onClick={onClick}\n      className={className}\n      style={{\n        borderRadius: organicRadius()\n      }}\n    >\n      {children}\n    </button>\n  );\n};\nconst ElementButton = (name, selectedElement, setElement) => {\n  let elementID = Species[name];\n\n  let color = pallette_data[elementID];\n  if (elementID == Species.Daphnia) {\n    color = pallette_data[Species.Zoop];\n  }\n  let selected = elementID == selectedElement;\n\n  let background = \"inherit\";\n  return (\n    <button\n      className={selected ? \"selected\" : \"\"}\n      key={name}\n      onClick={() => {\n        setElement(elementID);\n      }}\n      style={{\n        background,\n        backgroundColor: color,\n        borderRadius: organicRadius(),\n        filter: selected || `saturate(0.4) `\n      }}\n    >\n      {\"  \"}\n      {name}\n      {\"  \"}\n    </button>\n  );\n};\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props);\n    let tutorialProgress = localStorage.getItem(\"tutorialProgress\") || 0;\n    // console.log(tutorialDone);\n    this.state = {\n      submissionMenuOpen: false,\n      paused: false,\n      ff: false,\n      submitting: false,\n      size: 1,\n      tchotchkes: new Set(),\n      dataURL: null,\n      currentSubmission: null,\n      selectedElement: Species.Sand,\n      tutorialProgress\n    };\n    window.UI = this;\n    // this.load();\n    // if (!tutorialDone) {\n    window.setTimeout(() => {\n      // localStorage.setItem(\"tutorialDone\", true);\n      // this.setState({ tutorial: false });\n    }, 1000 * 10);\n    // }\n  }\n\n  componentDidUpdate(prevProps) {}\n  togglePause() {\n    window.paused = !this.state.paused;\n    this.setState({ paused: !this.state.paused });\n  }\n  toggleFF() {\n    window.ff = !this.state.ff;\n    this.setState({ ff: !this.state.ff });\n  }\n  play() {\n    window.paused = false;\n    this.setState({ paused: false });\n  }\n  pause() {\n    window.paused = true;\n    this.setState({ paused: true });\n  }\n\n  setSize(event, size) {\n    event.preventDefault();\n    this.setState({\n      size\n    });\n  }\n  reset() {\n    if (window.confirm(\"Reset your ecosystem?\")) {\n      this.play();\n      this.setState({ currentSubmission: null });\n      localStorage.setItem(\"last_tchotchke\", null);\n\n      reset();\n    }\n  }\n\n  closeMenu() {\n    this.play();\n    this.setState({ dataURL: null });\n  }\n  upload() {\n    console.log(\"saving\");\n    // let dataURL = snapshot(universe);\n    const cells = new Uint8Array(\n      memory.buffer,\n      universe.cells(),\n      width * height * 4\n    );\n\n    // Create canvas\n    let canvas = document.createElement(\"canvas\"),\n      context = canvas.getContext(\"2d\"),\n      imgData = context.createImageData(width, height);\n\n    canvas.height = height;\n    canvas.width = width;\n\n    // fill imgData with data from cells\n    for (var i = 0; i < width * height * 4; i++) {\n      if (i % 4 == 3) {\n        imgData.data[i] = 255;\n      } else {\n        imgData.data[i] = cells[i];\n      }\n    }\n    // put data to context at (0, 0)\n    context.putImageData(imgData, 0, 0);\n\n    let cellData = canvas.toDataURL(\"image/png\");\n    let dataString = JSON.stringify(cellData);\n    try {\n      localStorage.setItem(\"cell_data\", dataString);\n      localStorage.setItem(\"o2\", universe.o2());\n      localStorage.setItem(\"time\", window.t);\n    } catch {\n      console.log(\"store failed\");\n    }\n\n    const sprite = new Uint8Array(\n      memory.buffer,\n      universe.sprite(),\n      width * height * 4\n    );\n\n    // fill imgData with data from sprite\n    for (var i = 0; i < width * height * 4; i++) {\n      imgData.data[i] = sprite[i];\n    }\n    // put data to context at (0, 0)\n    context.putImageData(imgData, 0, 0);\n\n    let spriteData = canvas.toDataURL(\"image/png\");\n    let spriteDataString = JSON.stringify(spriteData);\n    try {\n      localStorage.setItem(\"sprite_data\", spriteDataString);\n    } catch {\n      console.log(\"store failed\");\n    }\n\n    // this.load();\n  }\n  currentDateString() {\n    let date = new Date();\n    return `${date.getMonth()}-${date.getDate()}`;\n  }\n  findTchotchke() {\n    if (localStorage.getItem(\"last_tchotchke\") == this.currentDateString()) {\n      return;\n    }\n    if (this.state.tchotchkes.size >= 2) {\n      return;\n    }\n    this.setState(({ tchotchkes }) => {\n      localStorage.setItem(\"last_tchotchke\", this.currentDateString());\n      return { tchotchkes: tchotchkes.add(randomIco()) };\n    });\n  }\n  load() {\n    console.log(\"loading\");\n\n    window.setInterval(() => this.findTchotchke(), 1000 * 60 * 4);\n\n    var cellData = JSON.parse(localStorage.getItem(\"cell_data\"));\n    var spriteData = JSON.parse(localStorage.getItem(\"sprite_data\"));\n\n    if (!cellData) {\n      console.log(\"no save\");\n      window.setInterval(() => this.upload(), 1000 * 10);\n\n      return;\n    }\n\n    var canvas = document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n    var ctx = canvas.getContext(\"2d\");\n    var img = new Image();\n    img.src = cellData;\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0);\n      var imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n      const cellsData = new Uint8Array(\n        memory.buffer,\n        universe.cells(),\n        width * height * 4\n      );\n\n      // universe.reset();\n\n      for (var i = 0; i < width * height * 4; i++) {\n        cellsData[i] = imgData.data[i];\n      }\n      if (localStorage.getItem(\"o2\")) {\n        let o2 = parseInt(localStorage.getItem(\"o2\"), 10);\n        universe.set_o2(o2);\n      }\n\n      window.setInterval(() => this.upload(), 1000 * 10);\n    };\n\n    var canvas2 = document.createElement(\"canvas\");\n    canvas2.width = width;\n    canvas2.height = height;\n    var ctx2 = canvas2.getContext(\"2d\");\n\n    var img2 = new Image();\n    img2.src = spriteData;\n    img2.onload = () => {\n      ctx2.drawImage(img2, 0, 0);\n      var imgData = ctx2.getImageData(0, 0, canvas2.width, canvas2.height);\n\n      const spriteData = new Uint8Array(\n        memory.buffer,\n        universe.sprite(),\n        width * height * 4\n      );\n\n      for (var i = 0; i < width * height * 4; i++) {\n        spriteData[i] = imgData.data[i];\n      }\n    };\n    // universe.flush_undos();\n    // universe.push_undo();\n    // this.pause();\n  }\n\n  render() {\n    let {\n      ff,\n      selectedElement,\n      currentSubmission,\n      selectedTchotchke,\n      tchotchkes,\n      tutorialProgress\n    } = this.state;\n    let hash =\n      currentSubmission && currentSubmission.id\n        ? `#${currentSubmission.id}`\n        : \"\";\n\n    let activeSpecies = Object.keys(Species).filter(\n      name => !skiplist.includes(name)\n    );\n    // if (tutorial) {\n    //   activeSpecies = [\"Sand\", \"Water\"];\n    // }\n    return (\n      <div id=\"HUD\" className=\"fade\">\n        {/* <OrganicButton> */}\n        {/* <iframe\n          style={{\n            border: \"3px ridge whitesmoke\",\n            width: \"370px\",\n            height: \"40px\",\n            borderRadius: organicRadius()\n          }}\n          src=\"https://bandcamp.com/EmbeddedPlayer/album=4022061967/size=small/bgcol=ffffff/linkcol=7137dc/artwork=none/transparent=true/\"\n          seamless\n        >\n          <a href=\"http://mlesprg.bandcamp.com/album/mount-vision\">\n            Mount Vision by Emily A. Sprague\n          </a>\n        </iframe> */}\n        {/* </OrganicButton> */}\n        {/* <OrganicButton\n          onClick={() => this.togglePause()}\n          className={paused ? \"selected\" : \"\"}\n        >\n          {paused ? (\n            <svg height=\"20\" width=\"20\" id=\"d\" viewBox=\"0 0 300 300\">\n              <polygon id=\"play\" points=\"0,0 , 300,150 0,300\" />\n            </svg>\n          ) : (\n            <svg height=\"20\" width=\"20\" id=\"d\" viewBox=\"0 0 300 300\">\n              <polygon id=\"bar2\" points=\"0,0 110,0 110,300 0,300\" />\n              <polygon id=\"bar1\" points=\"190,0 300,0 300,300 190,300\" />\n            </svg>\n          )} */}\n        {/* </OrganicButton> */}\n\n        <OrganicButton\n          onClick={() => this.toggleFF()}\n          className={ff ? \"selected\" : \"\"}\n        >\n          <svg height=\"20\" width=\"20\" id=\"d\" viewBox=\"0 0 300 300\">\n            <polygon id=\"play\" points=\"0,50 , 150,150 0,250\" />\n            <polygon id=\"play\" points=\"150,50, 300,150 150,250\" />\n          </svg>\n        </OrganicButton>\n\n        <OrganicButton onClick={() => this.reset()}>Reset</OrganicButton>\n        {/* <button onClick={() => this.upload()}>upload</button> */}\n        {/* <button onClick={() => this.load()}>load</button> */}\n        <Link\n          to={{\n            pathname: \"/info/\",\n            hash\n          }}\n        >\n          <OrganicButton>info</OrganicButton>\n        </Link>\n\n        {/* {paused && <button onClick={() => universe.tick()}>Tick</button>} */}\n        {/* <OrganicButton\n          onClick={() => {\n            // reset();\n            universe.pop_undo();\n          }}\n          style={{ fontSize: 35 }}\n        >\n          ↜\n        </OrganicButton> */}\n\n        <OrganicButton\n          onClick={() => {\n            exportGif(universe, blob => {\n              this.pause();\n\n              this.setState({ dataURL: blob });\n            });\n          }}\n        >\n          📷\n        </OrganicButton>\n\n        {activeSpecies.map(n =>\n          ElementButton(n, selectedTchotchke || selectedElement, id =>\n            this.setState({ selectedElement: id, selectedTchotchke: null })\n          )\n        )}\n        {tchotchkes.size > 0 && (\n          <span className=\"tchotchkes\">\n            {Array.from(tchotchkes).map(url => (\n              <img\n                onClick={() => {\n                  document.documentElement.style.cursor = `url(\"${url}\"), default`;\n\n                  this.setState({ selectedTchotchke: url });\n                }}\n                className={selectedTchotchke == url ? \"selected\" : \"\"}\n                src={url}\n                key={url}\n              ></img>\n            ))}\n          </span>\n        )}\n        {selectedTchotchke && (\n          <div\n            className=\"discard\"\n            onClick={() => {\n              window.UI.setState(({ tchotchkes }) => {\n                tchotchkes.delete(selectedTchotchke);\n                return { tchotchkes, selectedTchotchke: null };\n              });\n            }}\n          >\n            Discard\n          </div>\n        )}\n\n        {this.state.dataURL && (\n          <Menu close={() => this.closeMenu()}>\n            <h4>~~~Share your Orb!~~~~</h4>\n\n            <img src={this.state.dataURL} className=\"submissionImg\" />\n            <h4>Orb.Farm</h4>\n            <h4>Tell your friends!</h4>\n            <div style={{ display: \"flex\" }}></div>\n          </Menu>\n        )}\n\n        {tutorialProgress < 4 && (\n          <React.Fragment>\n            <div className=\"welcome-scrim\"></div>\n            <div id=\"welcome\">\n              {/* <OrganicButton\n                className=\"x\"\n                onClick={() => {\n                  this.setState({ tutorialProgress: 10 });\n                }}\n              >\n                x\n              </OrganicButton> */}\n              <div className=\"welcome-right-column\">\n                <div className=\"welcome-speech\">\n                  {\n                    [\n                      <span>\n                        <h1>Welcome to Orb.Farm!</h1>{\" \"}\n                        <p>\n                          This is your personal aquatic ecosystem to sculpt,\n                          nurture, and observe.\n                        </p>\n                      </span>,\n                      <p>\n                        My advice? Start with the basics. Fill your tank with{\" \"}\n                        {ElementButton(\"Sand\", null, () => {})} and{\" \"}\n                        {ElementButton(\"Water\", null, () => {})}. Or vice versa!\n                      </p>,\n                      <p>\n                        From there, introduce lifeforms such as adorable{\" \"}\n                        {ElementButton(\"Daphnia\", null, () => {})} — just don't\n                        forget some tasty{\" \"}\n                        {ElementButton(\"Algae\", null, () => {})} for us to eat\n                        when we hatch.\n                      </p>,\n                      <span>\n                        <p>\n                          Balance the needs of your ecosystem to achieve a\n                          stable Orb community.\n                        </p>\n                        <h1>And have fun!</h1>{\" \"}\n                      </span>\n                    ][tutorialProgress]\n                  }\n                </div>\n              </div>\n              <img id=\"daphnia\" src={daphniaImg}></img>\n              <span>\n                <img id=\"bubblebig\" src={bubblebig}></img>\n                <h4 id=\"welcome-progress\">{tutorialProgress + 1}/4</h4>\n                <OrganicButton\n                  className=\"next-button\"\n                  onClick={() => {\n                    this.setState({ tutorialProgress: tutorialProgress + 1 });\n                    if (tutorialProgress == 3) {\n                      localStorage.setItem(\"tutorialProgress\", 4);\n                    }\n                  }}\n                >\n                  {tutorialProgress < 3 ? \"Next >\" : \"Begin!\"}\n                </OrganicButton>\n              </span>\n            </div>\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n}\n\nexport { Index };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport Info from \"./components/info\";\nimport { Index } from \"./components/ui\";\nimport Menu from \"./components/menu\";\n\nfunction AppRouter() {\n  return (\n    <Router>\n      <Route path=\"/\" component={Index} />\n      <Route\n        exact\n        path=\"/info/\"\n        component={() => (\n          <Menu>\n            <Info />\n          </Menu>\n        )}\n      />\n    </Router>\n  );\n}\n\nReactDOM.render(<AppRouter />, document.getElementById(\"ui\"));\n","let fsh = require(\"./glsl/sky.glsl\");\n\n/*forked from https://github.com/bysse/shadertoy-webgl-harness*/\n// Mixed with some webgl2 code taken from pilibs.js\n// http://iquilezles.org/code/piLibsJS/piLibsJS.htm\nclass WebGL {\n  constructor(canvasId, res) {\n    this.canvas = document.getElementById(canvasId);\n    var opts = {\n      stencil: false,\n      premultipliedAlpha: false\n    };\n\n    var gl = null;\n    if (gl == null) gl = this.canvas.getContext(\"webgl2\", opts);\n    if (gl == null) gl = this.canvas.getContext(\"experimental-webgl2\", opts);\n    if (gl == null) gl = this.canvas.getContext(\"webgl\", opts);\n    if (gl == null) gl = this.canvas.getContext(\"experimental-webgl\", opts);\n    this.gl = gl;\n    this.textures = {};\n    let mIs20 = !(this.gl instanceof WebGLRenderingContext);\n\n    let vertexShader = \"\";\n\n    if (mIs20) {\n      vertexShader +=\n        \"#version 300 es\\n\" +\n        \"#ifdef GL_ES\\n\" +\n        \"precision highp float;\\n\" +\n        \"precision highp int;\\n\" +\n        \"precision mediump sampler3D;\\n\" +\n        \"#endif\\n\" +\n        \"in \";\n    } else {\n      vertexShader +=\n        \"#ifdef GL_ES\\n\" +\n        \"precision highp float;\\n\" +\n        \"precision highp int;\\n\" +\n        \"#endif\\n\" +\n        \"attribute\";\n    }\n    vertexShader +=\n      \" vec4 aPosition; void main() { gl_Position = aPosition; } \";\n    let fragmentShader = \"\";\n\n    let mDerivatives;\n    let mShaderTextureLOD;\n\n    if (mIs20) {\n      mDerivatives = true;\n      mShaderTextureLOD = true;\n    } else {\n      mDerivatives = this.gl.getExtension(\"OES_standard_derivatives\");\n      mShaderTextureLOD = this.gl.getExtension(\"EXT_shader_texture_lod\");\n    }\n\n    if (mIs20) {\n      fragmentShader +=\n        \"#version 300 es\\n\" +\n        \"#ifdef GL_ES\\n\" +\n        \"precision highp float;\\n\" +\n        \"precision highp int;\\n\" +\n        \"precision mediump sampler3D;\\n\" +\n        \"#endif\\n\" +\n        \"out vec4 myOutputColor;\\n\";\n      fsh = fsh.replace(\"gl_FragColor\", \"myOutputColor\");\n    } else {\n      if (mDerivatives) {\n        fragmentShader +=\n          \"#ifdef GL_OES_standard_derivatives\\n#extension GL_OES_standard_derivatives : enable\\n#endif\\n\";\n      }\n      if (mShaderTextureLOD) {\n        fragmentShader += \"#extension GL_EXT_shader_texture_lod : enable\\n\";\n      }\n      fragmentShader +=\n        \"#ifdef GL_ES\\n\" +\n        \"precision highp float;\\n\" +\n        \"precision highp int;\\n\" +\n        \"#endif\\n\" +\n        \"vec4 texture(     sampler2D   s, vec2 c)                   { return texture2D(s,c); }\\n\" +\n        \"vec4 texture(     sampler2D   s, vec2 c, float b)          { return texture2D(s,c,b); }\\n\" +\n        \"vec4 texture(     samplerCube s, vec3 c )                  { return textureCube(s,c); }\\n\" +\n        \"vec4 texture(     samplerCube s, vec3 c, float b)          { return textureCube(s,c,b); }\\n\" +\n        \"float round( float x ) { return floor(x+0.5); }\\n\" +\n        \"vec2 round(vec2 x) { return floor(x + 0.5); }\\n\" +\n        \"vec3 round(vec3 x) { return floor(x + 0.5); }\\n\" +\n        \"vec4 round(vec4 x) { return floor(x + 0.5); }\\n\" +\n        \"float trunc( float x, float n ) { return floor(x*n)/n; }\\n\" +\n        \"mat3 transpose(mat3 m) { return mat3(m[0].x, m[1].x, m[2].x, m[0].y, m[1].y, m[2].y, m[0].z, m[1].z, m[2].z); }\\n\" +\n        \"float determinant( in mat2 m ) { return m[0][0]*m[1][1] - m[0][1]*m[1][0]; }\\n\" +\n        \"float determinant( mat4 m ) { float b00 = m[0][0] * m[1][1] - m[0][1] * m[1][0], b01 = m[0][0] * m[1][2] - m[0][2] * m[1][0], b02 = m[0][0] * m[1][3] - m[0][3] * m[1][0], b03 = m[0][1] * m[1][2] - m[0][2] * m[1][1], b04 = m[0][1] * m[1][3] - m[0][3] * m[1][1], b05 = m[0][2] * m[1][3] - m[0][3] * m[1][2], b06 = m[2][0] * m[3][1] - m[2][1] * m[3][0], b07 = m[2][0] * m[3][2] - m[2][2] * m[3][0], b08 = m[2][0] * m[3][3] - m[2][3] * m[3][0], b09 = m[2][1] * m[3][2] - m[2][2] * m[3][1], b10 = m[2][1] * m[3][3] - m[2][3] * m[3][1], b11 = m[2][2] * m[3][3] - m[2][3] * m[3][2];  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;}\\n\" +\n        \"mat2 inverse(mat2 m) { float det = determinant(m); return mat2(m[1][1], -m[0][1], -m[1][0], m[0][0]) / det; }\\n\" +\n        \"mat4 inverse(mat4 m ) { float inv0 = m[1].y*m[2].z*m[3].w - m[1].y*m[2].w*m[3].z - m[2].y*m[1].z*m[3].w + m[2].y*m[1].w*m[3].z + m[3].y*m[1].z*m[2].w - m[3].y*m[1].w*m[2].z; float inv4 = -m[1].x*m[2].z*m[3].w + m[1].x*m[2].w*m[3].z + m[2].x*m[1].z*m[3].w - m[2].x*m[1].w*m[3].z - m[3].x*m[1].z*m[2].w + m[3].x*m[1].w*m[2].z; float inv8 = m[1].x*m[2].y*m[3].w - m[1].x*m[2].w*m[3].y - m[2].x  * m[1].y * m[3].w + m[2].x  * m[1].w * m[3].y + m[3].x * m[1].y * m[2].w - m[3].x * m[1].w * m[2].y; float inv12 = -m[1].x  * m[2].y * m[3].z + m[1].x  * m[2].z * m[3].y +m[2].x  * m[1].y * m[3].z - m[2].x  * m[1].z * m[3].y - m[3].x * m[1].y * m[2].z + m[3].x * m[1].z * m[2].y; float inv1 = -m[0].y*m[2].z * m[3].w + m[0].y*m[2].w * m[3].z + m[2].y  * m[0].z * m[3].w - m[2].y  * m[0].w * m[3].z - m[3].y * m[0].z * m[2].w + m[3].y * m[0].w * m[2].z; float inv5 = m[0].x  * m[2].z * m[3].w - m[0].x  * m[2].w * m[3].z - m[2].x  * m[0].z * m[3].w + m[2].x  * m[0].w * m[3].z + m[3].x * m[0].z * m[2].w - m[3].x * m[0].w * m[2].z; float inv9 = -m[0].x  * m[2].y * m[3].w +  m[0].x  * m[2].w * m[3].y + m[2].x  * m[0].y * m[3].w - m[2].x  * m[0].w * m[3].y - m[3].x * m[0].y * m[2].w + m[3].x * m[0].w * m[2].y; float inv13 = m[0].x  * m[2].y * m[3].z - m[0].x  * m[2].z * m[3].y - m[2].x  * m[0].y * m[3].z + m[2].x  * m[0].z * m[3].y + m[3].x * m[0].y * m[2].z - m[3].x * m[0].z * m[2].y; float inv2 = m[0].y  * m[1].z * m[3].w - m[0].y  * m[1].w * m[3].z - m[1].y  * m[0].z * m[3].w + m[1].y  * m[0].w * m[3].z + m[3].y * m[0].z * m[1].w - m[3].y * m[0].w * m[1].z; float inv6 = -m[0].x  * m[1].z * m[3].w + m[0].x  * m[1].w * m[3].z + m[1].x  * m[0].z * m[3].w - m[1].x  * m[0].w * m[3].z - m[3].x * m[0].z * m[1].w + m[3].x * m[0].w * m[1].z; float inv10 = m[0].x  * m[1].y * m[3].w - m[0].x  * m[1].w * m[3].y - m[1].x  * m[0].y * m[3].w + m[1].x  * m[0].w * m[3].y + m[3].x * m[0].y * m[1].w - m[3].x * m[0].w * m[1].y; float inv14 = -m[0].x  * m[1].y * m[3].z + m[0].x  * m[1].z * m[3].y + m[1].x  * m[0].y * m[3].z - m[1].x  * m[0].z * m[3].y - m[3].x * m[0].y * m[1].z + m[3].x * m[0].z * m[1].y; float inv3 = -m[0].y * m[1].z * m[2].w + m[0].y * m[1].w * m[2].z + m[1].y * m[0].z * m[2].w - m[1].y * m[0].w * m[2].z - m[2].y * m[0].z * m[1].w + m[2].y * m[0].w * m[1].z; float inv7 = m[0].x * m[1].z * m[2].w - m[0].x * m[1].w * m[2].z - m[1].x * m[0].z * m[2].w + m[1].x * m[0].w * m[2].z + m[2].x * m[0].z * m[1].w - m[2].x * m[0].w * m[1].z; float inv11 = -m[0].x * m[1].y * m[2].w + m[0].x * m[1].w * m[2].y + m[1].x * m[0].y * m[2].w - m[1].x * m[0].w * m[2].y - m[2].x * m[0].y * m[1].w + m[2].x * m[0].w * m[1].y; float inv15 = m[0].x * m[1].y * m[2].z - m[0].x * m[1].z * m[2].y - m[1].x * m[0].y * m[2].z + m[1].x * m[0].z * m[2].y + m[2].x * m[0].y * m[1].z - m[2].x * m[0].z * m[1].y; float det = m[0].x * inv0 + m[0].y * inv4 + m[0].z * inv8 + m[0].w * inv12; det = 1.0 / det; return det*mat4( inv0, inv1, inv2, inv3,inv4, inv5, inv6, inv7,inv8, inv9, inv10, inv11,inv12, inv13, inv14, inv15);}\\n\" +\n        \"float sinh(float x)  { return (exp(x)-exp(-x))/2.; }\\n\" +\n        \"float cosh(float x)  { return (exp(x)+exp(-x))/2.; }\\n\" +\n        \"float tanh(float x)  { return sinh(x)/cosh(x); }\\n\" +\n        \"float coth(float x)  { return cosh(x)/sinh(x); }\\n\" +\n        \"float sech(float x)  { return 1./cosh(x); }\\n\" +\n        \"float csch(float x)  { return 1./sinh(x); }\\n\" +\n        \"float asinh(float x) { return    log(x+sqrt(x*x+1.)); }\\n\" +\n        \"float acosh(float x) { return    log(x+sqrt(x*x-1.)); }\\n\" +\n        \"float atanh(float x) { return .5*log((1.+x)/(1.-x)); }\\n\" +\n        \"float acoth(float x) { return .5*log((x+1.)/(x-1.)); }\\n\" +\n        \"float asech(float x) { return    log((1.+sqrt(1.-x*x))/x); }\\n\" +\n        \"float acsch(float x) { return    log((1.+sqrt(1.+x*x))/x); }\\n\";\n      if (mShaderTextureLOD) {\n        fragmentShader +=\n          \"vec4 textureLod(  sampler2D   s, vec2 c, float b)          { return texture2DLodEXT(s,c,b); }\\n\";\n        fragmentShader +=\n          \"vec4 textureGrad( sampler2D   s, vec2 c, vec2 dx, vec2 dy) { return texture2DGradEXT(s,c,dx,dy); }\\n\";\n      } else {\n        fsh = fsh.replace(\"textureLod\", \"texture\");\n      }\n    }\n\n    fragmentShader += fsh;\n    // console.log(fragmentShader);\n    this.shader = WebGL.linkShader(this.gl, vertexShader, fragmentShader);\n    this.shader.vertexAttribute = this.gl.getAttribLocation(\n      this.shader,\n      \"aPosition\"\n    );\n    this.gl.enableVertexAttribArray(this.shader.vertexAttribute);\n\n    this.height = window.innerHeight / res;\n    this.width = window.innerWidth / res;\n    this.canvas.setAttribute(\"width\", this.width);\n    this.canvas.setAttribute(\"height\", this.height);\n\n    this.vertexBuffer = WebGL.createVBO(this.gl, 3, [\n      1.0,\n      1.0,\n      0.0,\n      -1.0,\n      1.0,\n      0.0,\n      1.0,\n      -1.0,\n      0.0,\n      -1.0,\n      -1.0,\n      0.0\n    ]);\n    this.running = false;\n    this.time0 = 0.0;\n  }\n\n  loadTexture(channelNumber, source) {\n    var texture = this.gl.createTexture();\n    var gl = this.gl;\n    texture.image = new Image();\n    texture.image.onload = () => {\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\n      try {\n        gl.texImage2D(\n          gl.TEXTURE_2D,\n          0,\n          gl.RGBA,\n          gl.RGBA,\n          gl.UNSIGNED_BYTE,\n          texture.image\n        );\n      } catch (err) {\n        console.log(`ERROR: Failed to load texture ${source} : ${err}`);\n\n        console.log(`INFO: Generating placeholder texture for ${source}`);\n        var w = 64,\n          bw = 4,\n          data = [];\n        for (var y = 0; y < w; y++) {\n          for (var x = 0; x < w; x++) {\n            var ix = parseInt(x / bw),\n              iy = parseInt(y / bw);\n            var c = 0xff * ((ix + iy) % 2);\n            data = data.concat([c, c, c, 0xff]);\n          }\n        }\n        gl.texImage2D(\n          gl.TEXTURE_2D,\n          0,\n          gl.RGBA,\n          w,\n          w,\n          0,\n          gl.RGBA,\n          gl.UNSIGNED_BYTE,\n          new Uint8Array(data)\n        );\n      }\n\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n\n      this.textures[channelNumber] = texture;\n    };\n    texture.image.src = source;\n  }\n\n  start() {\n    if (this.running) {\n      return;\n    }\n\n    this._start();\n  }\n\n  _start() {\n    this.running = true;\n    this.time0 = WebGL.getTime();\n    this.timePreviousFrame = this.time0;\n\n    this.gl.disable(this.gl.DEPTH_TEST);\n    this.gl.viewport(0, 0, this.width, this.height);\n    this.gl.useProgram(this.shader);\n  }\n\n  stop() {\n    this.running = false;\n  }\n\n  frame(gameTime) {\n    let gl = this.gl;\n    if (!this.running) {\n      return;\n    }\n\n    let shader = this.shader;\n    let time = WebGL.getTime() - this.time0;\n    let dt = time - this.timePreviousFrame;\n    this.timePreviousFrame = time;\n\n    gl.clear(gl.DEPTH_BUFFER_BIT);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.vertexAttribPointer(\n      shader.vertexAttribute,\n      this.vertexBuffer.itemSize,\n      gl.FLOAT,\n      false,\n      0,\n      0\n    );\n\n    // set texture\n    for (var channel in this.textures) {\n      var texture = this.textures[channel];\n      gl.activeTexture(gl.TEXTURE0 + parseInt(channel));\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.uniform1i(\n        gl.getUniformLocation(shader, \"iChannel\" + channel),\n        channel\n      );\n    }\n\n    // update uniforms\n    gl.uniform3f(\n      gl.getUniformLocation(shader, \"iResolution\"),\n      this.width,\n      this.height,\n      0\n    );\n    gl.uniform1f(gl.getUniformLocation(shader, \"iGlobalTime\"), time); // legacy support\n    gl.uniform1f(gl.getUniformLocation(shader, \"iTime\"), time);\n    gl.uniform1f(gl.getUniformLocation(shader, \"gameTime\"), gameTime);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, this.vertexBuffer.numItems);\n  }\n\n  static createVBO(gl, stride, vertexData) {\n    var vertexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      new Float32Array(vertexData),\n      gl.STATIC_DRAW\n    );\n    vertexBuffer.itemSize = stride;\n    vertexBuffer.numItems = vertexData.length / stride;\n    return vertexBuffer;\n  }\n\n  static linkShader(gl, vertexSource, fragmentSource) {\n    var program = gl.createProgram();\n    gl.attachShader(\n      program,\n      WebGL.compileShader(gl, gl.VERTEX_SHADER, vertexSource)\n    );\n    gl.attachShader(\n      program,\n      WebGL.compileShader(gl, gl.FRAGMENT_SHADER, fragmentSource)\n    );\n    gl.linkProgram(program);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      WebGL.showLogProgram(gl, program);\n      throw `Failed to link shader!`;\n    }\n\n    program.uniformLocation = (gl, name) =>\n      gl.getUniformLocation(program, name);\n\n    return program;\n  }\n\n  static compileShader(gl, shaderType, source) {\n    var shader = gl.createShader(shaderType);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      let type =\n        shaderType == gl.VERTEX_SHADER ? \"vertex shader\" : \"fragment shader\";\n      WebGL.showLog(gl, shader);\n      throw `Failed to compile ${type}`;\n    }\n    return shader;\n  }\n\n  static getTime() {\n    return 0.001 * new Date().getTime();\n  }\n  static showLog(gl, shader) {\n    var compilationLog = gl.getShaderInfoLog(shader);\n    console.log(\"ERROR: \" + compilationLog);\n  }\n  static showLogProgram(gl, program) {\n    var compilationLog = gl.getProgramInfoLog(program);\n    console.log(\"ERROR: \" + compilationLog);\n  }\n}\n\nfunction startSky(res) {\n  var webGL = new WebGL(\"sky-canvas\", res);\n  webGL.loadTexture(0, \"assets/noise.png\");\n\n  webGL.start();\n  return webGL;\n}\n\nexport { startSky };\n","import { Universe, Species } from \"../crate/pkg\";\n\nimport { startWebGL } from \"./render\";\nimport { startPlotter } from \"./plot\";\nimport { fps } from \"./fps\";\nimport {} from \"./paint\";\nimport {} from \"./app\";\nimport {} from \"./setup\";\nimport { startSky } from \"./shaderToy\";\nimport { getTchotchkes } from \"./tchotchkes\";\n\nlet n = 200;\nlet h = n / 2;\nlet d = n - 6;\n\nconst universe = Universe.new(n, n);\n\nfunction drawBowl() {\n  universe.paint(h, h, d + 2, Species.Glass);\n  universe.paint(h - 30, d - 3, 20, Species.Wood);\n  universe.paint(h + 30, d - 3, 20, Species.Wood);\n  universe.paint(h, h, d - 2, Species.Air);\n}\n\ndrawBowl();\n// for (var x = 30; x < d - 30; x += 10) {\n// universe.paint(x, h * 1.2, h, Species.Water);\n// }\n\n// for (var x = 0; x < d; x += 10) {\n// universe.paint(x, n - 50, 40, Species.Sand);\n// }\n// universe.paint(h, h, h * 0.9, Species.Water);\n\n// universe.paint(h, h, 2, Species.Zoop);\n// universe.paint(h + 20, h, 2, Species.Fish);\n// universe.paint(h, h * 1.2, 2, Species.Bacteria);\n// universe.paint(h * 1.5, h * 1.2, 2, Species.Seed);\n\n// universe.paint(h, h, 10, Species.Algae);\n\n// universe.paint(150, 50, 25, Species.Seed);\nlet ratio = 2;\nlet width = n;\nlet height = n;\nconst canvas = document.getElementById(\"sand-canvas\");\n\ncanvas.height = n * ratio * Math.ceil(window.devicePixelRatio);\ncanvas.width = n * ratio * Math.ceil(window.devicePixelRatio);\n\nconst HUD = document.getElementById(\"HUD\");\nlet canvasSize;\nlet resize = () => {\n  let screen_width = window.innerWidth;\n  let HUDheight = 50;\n  let screen_height = window.innerHeight - HUDheight;\n\n  let canvasStyle = \"\";\n  let HUDStyle = \"\";\n  if (screen_width - 150 > screen_height) {\n    if (screen_width - window.innerHeight < 400) {\n      // landscape compressed\n      canvasStyle = `height: ${window.innerHeight}px; margin:3px`;\n      canvasSize = window.innerHeight;\n      HUDStyle = `width: ${screen_width -\n        window.innerHeight -\n        12}px; margin: 2px;`;\n    } else {\n      // landscape wide\n      canvasStyle = `height: ${window.innerHeight}px`;\n      canvasSize = window.innerHeight;\n\n      HUDStyle = `width: ${(screen_width - window.innerHeight) / 2 -\n        7}px; margin: 2px;`;\n    }\n  } else {\n    //portrait (mobile)\n    canvasSize = screen_width;\n\n    canvasStyle = `width: ${screen_width}px; `;\n    HUDStyle = \"\";\n  }\n  HUD.style = HUDStyle;\n  canvas.style = canvasStyle;\n};\n\nresize();\nwindow.addEventListener(\"deviceorientation\", resize, true);\nwindow.addEventListener(\"resize\", resize);\n\nlet drawSand = startWebGL({ canvas, universe });\nlet sky_ratio = canvasSize / n;\n\nlet sky;\ntry {\n  sky = startSky(sky_ratio * 2);\n} catch (e) {\n  console.error(\"skys haunted\");\n  sky = {\n    frame: () => {}\n  };\n}\nlet plotcanvas = document.getElementById(\"plot-canvas\");\nlet { drawPlot, recordDataPoint } = startPlotter({\n  canvas: plotcanvas,\n  universe\n});\n\nlet t = parseInt(localStorage.getItem(\"time\"), 10) || 0;\nconst renderLoop = () => {\n  const now = performance.now();\n\n  let max_tick_per_frame = window.ff ? 11 : 1;\n  for (var i = 0; i < max_tick_per_frame; i++) {\n    var dayTime = (t / 50) % 255;\n\n    if (!window.paused) {\n      fps.render(); // new\n\n      universe.tick();\n      t += 1;\n\n      if (dayTime > 70 && dayTime < 170) {\n        t += 10;\n      }\n    }\n    universe.set_time(dayTime);\n\n    recordDataPoint();\n    let elapsed_time = performance.now() - now;\n    if (elapsed_time > 13) {\n      break;\n    }\n  }\n  window.t = t;\n  drawSand.draw();\n  let skyTime = dayTime / 255;\n  sky.frame(skyTime);\n  drawPlot();\n\n  window.animWebationId = requestAnimationFrame(renderLoop);\n};\nfunction reset() {\n  console.log(\"reseting\");\n  localStorage.setItem(\"cell_data\", null);\n  universe.reset();\n  localStorage.setItem(\"o2\", universe.total_gas() / 2);\n  localStorage.setItem(\"time\", 0);\n\n  drawBowl();\n}\nwindow.u = universe;\nwindow.universe = universe;\nrenderLoop();\n\nwindow.UI.load();\n// getTchotchkes().then(images => {\n//   images.forEach((image, i) => {\n//     // console.log(image);\n//     universe.place_sprite(\n//       10 + Math.random() * 150,\n//       10 + Math.random() * 150,\n//       image.data\n//     );\n//   });\n// });\n// debugger;\n\nexport { canvas, width, height, ratio, universe, reset };\n","import * as wasm from './sandtable_bg.wasm';\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nfunction notDefined(what) { return () => { throw new Error(`${what} is not defined`); }; }\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n/**\n*/\nexport const Species = Object.freeze({ Air:0,Glass:1,Sand:2,Stone:12,Wood:13,Water:3,Algae:4,Zoop:6,Daphnia:14,Seed:11,Plant:5,Bacteria:8,Fish:7,FishTail:15,GoldFish:18,GoldFishTail:19,Nitrogen:9,Waste:10,Bubble:16,Biofilm:17,Plastic:20, });\n/**\n*/\nexport class Cell {\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_cell_free(ptr);\n    }\n}\n/**\n*/\nexport class Light {\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_light_free(ptr);\n    }\n}\n/**\n*/\nexport class Pixel {\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_pixel_free(ptr);\n    }\n}\n/**\n*/\nexport class Universe {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Universe.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_universe_free(ptr);\n    }\n    /**\n    */\n    reset() {\n        wasm.universe_reset(this.ptr);\n    }\n    /**\n    */\n    calculate_light() {\n        wasm.universe_calculate_light(this.ptr);\n    }\n    /**\n    * @param {number} brightness\n    * @param {number} x\n    * @param {number} y\n    * @param {number} dx\n    * @param {number} dy\n    */\n    cast_ray(brightness, x, y, dx, dy) {\n        wasm.universe_cast_ray(this.ptr, brightness, x, y, dx, dy);\n    }\n    /**\n    */\n    tick() {\n        wasm.universe_tick(this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        const ret = wasm.universe_width(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    height() {\n        const ret = wasm.universe_height(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    o2() {\n        const ret = wasm.universe_o2(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    total_gas() {\n        const ret = wasm.universe_total_gas(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    co2() {\n        const ret = wasm.universe_co2(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    cells() {\n        const ret = wasm.universe_cells(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    lights() {\n        const ret = wasm.universe_lights(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    sprite() {\n        const ret = wasm.universe_sprite(this.ptr);\n        return ret;\n    }\n    /**\n    * @param {number} xi\n    * @param {number} yi\n    * @param {any} typebuf\n    */\n    place_sprite(xi, yi, typebuf) {\n        wasm.universe_place_sprite(this.ptr, xi, yi, addHeapObject(typebuf));\n    }\n    /**\n    * @param {number} x\n    * @param {number} y\n    * @param {number} size\n    * @param {number} species\n    */\n    paint(x, y, size, species) {\n        wasm.universe_paint(this.ptr, x, y, size, species);\n    }\n    /**\n    */\n    push_undo() {\n        wasm.universe_push_undo(this.ptr);\n    }\n    /**\n    */\n    pop_undo() {\n        wasm.universe_pop_undo(this.ptr);\n    }\n    /**\n    */\n    flush_undos() {\n        wasm.universe_flush_undos(this.ptr);\n    }\n    /**\n    * @param {number} t\n    */\n    set_time(t) {\n        wasm.universe_set_time(this.ptr, t);\n    }\n    /**\n    * @param {number} v\n    */\n    set_o2(v) {\n        wasm.universe_set_o2(this.ptr, v);\n    }\n    /**\n    */\n    inc_time() {\n        wasm.universe_inc_time(this.ptr);\n    }\n    /**\n    * @param {number} width\n    * @param {number} height\n    * @returns {Universe}\n    */\n    static new(width, height) {\n        const ret = wasm.universe_new(width, height);\n        return Universe.__wrap(ret);\n    }\n}\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nexport const __wbg_buffer_d31feadf69cb45fc = function(arg0) {\n    const ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nexport const __wbg_length_b6e0c5630f641946 = function(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nexport const __wbg_new_ed7079cf157e44d5 = function(arg0) {\n    const ret = new Uint8Array(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport const __wbg_set_2aae8dbe165bf1a3 = function(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nexport const __wbg_random_09364f2d8647f133 = typeof Math.random == 'function' ? Math.random : notDefined('Math.random');\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm(arg0, arg1));\n};\n\nexport const __wbindgen_memory = function() {\n    const ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\n","module.exports = \"\\n// boring \\\"pass-through\\\" vertex shader\\nprecision mediump float;\\n#define GLSLIFY 1\\nattribute vec2 position;\\nvarying vec2 uv;\\nvoid main() {\\n  uv = position;\\n  gl_Position = vec4(position, 0, 1);\\n}\"","module.exports = __webpack_public_path__ + \"assets/bubblebig.png\";","module.exports = __webpack_public_path__ + \"assets/bubblemed.png\";","module.exports = __webpack_public_path__ + \"assets/bubblesmall.png\";","module.exports = \"precision highp float;\\n#define GLSLIFY 1\\nuniform float t;\\nuniform float dpi;\\nuniform vec2 resolution;\\nuniform bool isSnapshot;\\nuniform sampler2D backBuffer;\\nuniform sampler2D dataTexture;\\nuniform sampler2D lightTexture;\\nuniform sampler2D spriteTexture;\\n\\nvarying vec2 uv;\\n\\n// clang-format off\\nvec3 hsv2rgb(vec3 c) {\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\n//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289_0(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289_0(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute_0(vec4 x) {\\n     return mod289_0(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise_0(vec3 v)\\n  {\\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g_0 = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g_0;\\n  vec3 i1 = min( g_0.xyz, l.zxy );\\n  vec3 i2 = max( g_0.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289_0(i);\\n  vec4 p = permute_0( permute_0( permute_0(\\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1.xy,h.z);\\n  vec3 p3 = vec3(a1.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\\n                                dot(p2,x2), dot(p3,x3) ) );\\n  }\\n\\n//\\n// Description : Array and textureless GLSL 2D simplex noise function.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289_1(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec2 mod289_1(vec2 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec3 permute_1(vec3 x) {\\n  return mod289_1(((x*34.0)+1.0)*x);\\n}\\n\\nfloat snoise_1(vec2 v)\\n  {\\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\\n                      0.024390243902439); // 1.0 / 41.0\\n// First corner\\n  vec2 i  = floor(v + dot(v, C.yy) );\\n  vec2 x0 = v -   i + dot(i, C.xx);\\n\\n// Other corners\\n  vec2 i1;\\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\\n  //i1.y = 1.0 - i1.x;\\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\\n  // x1 = x0 - i1 + 1.0 * C.xx ;\\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\\n  vec4 x12 = x0.xyxy + C.xxzz;\\n  x12.xy -= i1;\\n\\n// Permutations\\n  i = mod289_1(i); // Avoid truncation effects in permutation\\n  vec3 p = permute_1( permute_1( i.y + vec3(0.0, i1.y, 1.0 ))\\n    + i.x + vec3(0.0, i1.x, 1.0 ));\\n\\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\\n  m = m*m ;\\n  m = m*m ;\\n\\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\\n\\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\\n  vec3 h = abs(x) - 0.5;\\n  vec3 ox = floor(x + 0.5);\\n  vec3 a0 = x - ox;\\n\\n// Normalise gradients implicitly by scaling m\\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\n\\n// Compute final noise value at P\\n  vec3 g;\\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\n  return 130.0 * dot(m, g);\\n}\\n\\nhighp float random(vec2 co)\\n{\\n    highp float a = 12.9898;\\n    highp float b = 78.233;\\n    highp float c = 43758.5453;\\n    highp float dt= dot(co.xy ,vec2(a,b));\\n    highp float sn= mod(dt,3.14);\\n    return fract(sin(sn) * c);\\n}\\n\\n// clang-format on\\n\\nvoid main() {\\n  vec3 color;\\n  vec2 grid = floor(uv * (resolution / dpi));\\n\\n  float noise = snoise_0(vec3(grid, t * 0.05));\\n  vec2 noise_2d = vec2(floor(0.5 + noise),\\n                       floor(0.5 + snoise_0(vec3(grid, (t + 20.) * 0.05))));\\n\\n  vec2 textCoord = (uv * vec2(0.5, -0.5)) + vec2(0.5);\\n  vec2 sampleCoord = textCoord + (noise_2d / (resolution / 2.));\\n\\n  vec4 data = texture2D(dataTexture, textCoord);\\n  // vec4 dataSample = texture2D(dataTexture, sampleCoord);\\n\\n  vec4 lightCell = texture2D(lightTexture, textCoord);\\n  vec4 spriteValue = texture2D(spriteTexture, textCoord);\\n\\n  float lightValue = lightCell.r;\\n  float blueLightValue = lightCell.b;\\n\\n  vec4 lightSampleCell = texture2D(lightTexture, sampleCoord);\\n  float sampleLightValue = lightSampleCell.r;\\n\\n  lightValue = 0.5 * lightValue + 0.5 * sampleLightValue;\\n  int type = int((data.r * 255.) + 0.1);\\n  float energy = data.g;\\n  float age = data.b;\\n\\n  float hue = 0.0;\\n  float saturation = 0.6;\\n  float lightness = 0.3 + energy * 0.5;\\n  float a = 1.0;\\n  float brightness = 0.0;\\n\\n  if (type == 0) { // Air\\n\\n    hue = 0.0;\\n    saturation = 0.1;\\n    lightness = 0.1;\\n    a = 0.0;\\n    if (isSnapshot) {\\n      saturation = 0.05;\\n      lightness = 1.01;\\n      a = 1.0;\\n    }\\n\\n  } else if (type == 1) { // Glass\\n    hue = 0.1;\\n    saturation = 0.2;\\n    lightness = 1.0;\\n    a = 0.4 + lightValue * 0.3;\\n  } else if (type == 2) { // Sand\\n    hue = 0.1;\\n    saturation = 0.4 + (age * 0.3);\\n    lightness = 1.3 - energy * 1.2;\\n\\n  } else if (type == 3) { // Water\\n    hue = 0.58;\\n    saturation = 0.6;\\n    lightness = 0.5 + energy * 0.25 + noise * 0.1;\\n    a = 0.4;\\n    if (isSnapshot) {\\n      a = 1.0;\\n    }\\n  } else if (type == 4) { // Algae\\n    hue = 0.4 - age * 0.3;\\n    lightness += 0.1;\\n    saturation = 0.5 - (energy * .1);\\n  } else if (type == 5) { // Plant\\n    hue = 0.4;\\n    saturation = 0.4;\\n\\n    if (energy > 45. / 255.) {\\n      hue = 0.48;\\n    }\\n    if (age == 0.) {\\n      // saturation = 0.9;\\n    }\\n    lightness = 0.2 + (1.0 - energy) * 0.4;\\n\\n  } else if (type == 6) { // Zoop\\n    hue = 0.9;\\n    lightness += 0.7;\\n  } else if (type == 7) { // Fish\\n    hue = 0.0;\\n    lightness += 0.4;\\n  } else if (type == 8) { // Bacteria\\n    hue = 0.66;\\n    saturation += 0.2;\\n    lightness += 0.2;\\n    a = 0.5;\\n    if (isSnapshot) {\\n      // lightness += 0.8;\\n      saturation -= 0.2;\\n\\n      a = 1.0;\\n    }\\n\\n  } else if (type == 9) { // ???\\n    hue = 0.6;\\n    saturation = 0.4;\\n    lightness = 0.7 + data.g * 0.5;\\n  } else if (type == 10) { // Waste\\n    hue = 0.9;\\n    lightness -= 0.3;\\n    saturation = 0.4;\\n  } else if (type == 11) { // Seed\\n    hue = 0.4;\\n    saturation = 0.4;\\n  } else if (type == 12) { // Stone\\n    hue = -0.4 + (data.g * 0.5);\\n    saturation = 0.1;\\n  } else if (type == 13) { // Wood\\n    hue = (data.g * 0.1);\\n    saturation = 0.3;\\n    lightness = 0.3 + data.g * 0.3;\\n  } else if (type == 14) { // Egg\\n    hue = 0.9;\\n    saturation = age / 3.;\\n    lightness = 1.0;\\n    a = 0.8;\\n\\n  } else if (type == 15) { // Tail\\n    hue += fract(age * 1.9 * 255. / 8.) * 0.2;\\n    lightness += 0.4;\\n    saturation -= (fract(age * 1.9 * 255. / 8.) - 0.1) * 0.7;\\n\\n    // saturation += fract(age * 255.*6.);\\n  } else if (type == 16) { // bubble\\n\\n    hue = 0.0;\\n    saturation = 0.1;\\n    lightness = 0.1;\\n    a = 0.0;\\n    if (isSnapshot) {\\n      saturation = 0.05;\\n      lightness = 1.01;\\n      a = 1.0;\\n    }\\n  } else if (type == 17) { // biofilm\\n    hue = 0.48;\\n    saturation = 0.6;\\n    lightness = 0.5 + energy * 0.25 + noise * 0.1;\\n    a = 0.4;\\n    if (isSnapshot) {\\n      a = 1.0;\\n    }\\n  } else if (type == 18) { // goldfish\\n    hue = 0.1;\\n    lightness += 0.4;\\n    saturation = 0.7;\\n  } else if (type == 19) { // goldfishtail\\n    hue = 0.1;\\n    hue += fract(age * 1.9 * 255. / 9.) * 0.1;\\n    lightness += 0.8;\\n    saturation = 0.8;\\n    saturation -= (fract(age * 1.9 * 255. / 7.) - 0.1) * 0.6;\\n  } else if (type == 20) { // plastic\\n    hue = 0.1;\\n    lightness += 0.5;\\n    saturation = 0.1;\\n  }\\n\\n  // } else if (type == 16) { // oil\\n  //   hue = (data.g * 5.0) + t * .008;\\n\\n  //   saturation = 0.2;\\n  //   lightness = 0.3;\\n  // } else if (type == 17) { // Rocket\\n  //   hue = 0.0;\\n  //   saturation = 0.4 + data.b;\\n  //   lightness = 0.9;\\n  // } else if (type == 18) { // fungus\\n  //   hue = (data.g * 0.15) - 0.1;\\n  //   saturation = (data.g * 0.8) - 0.05;\\n\\n  //   // (data.g * 0.00);\\n  //   lightness = 1.5 - (data.g * 0.2);\\n  // } else if (type == 19) { // seed/flower\\n\\n  //   hue = fract(fract(data.b * 2.) * 0.5) - 0.3;\\n  //   saturation = 0.7 * (data.g + 0.4) + data.b * 0.2;\\n  //   lightness = 0.9 * (data.g + 0.9);\\n  // }\\n  if (isSnapshot == false) {\\n    lightness *= (0.975 + snoise_1(floor(uv * resolution / dpi)) * 0.025);\\n  }\\n  lightness += lightValue / 2.;\\n  saturation = min(saturation, 1.0);\\n  lightness = min(lightness, 1.0);\\n  color = hsv2rgb(vec3(hue, saturation, lightness));\\n\\n  color += vec3(0.25, 0.25, 0.7) * 0.6 * (blueLightValue + lightSampleCell.b);\\n  a += blueLightValue + lightSampleCell.b;\\n  gl_FragColor = vec4(color, a);\\n  if (spriteValue.a > 0.) {\\n    vec4 spriteColor = spriteValue;\\n\\n    spriteColor.rgb *= ((lightValue) + 0.7);\\n    gl_FragColor = spriteColor;\\n  }\\n}\"","module.exports = \"precision highp float;\\n#define GLSLIFY 1\\nuniform float t;\\nuniform float i;\\nuniform float max_readings;\\nuniform float n_readings;\\nuniform float dpi;\\nuniform vec2 resolution;\\nuniform sampler2D data;\\n\\nvarying vec2 uv;\\n\\n// clang-format off\\nvec3 hsv2rgb(vec3 c) {\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\n//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289_0(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289_0(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute_0(vec4 x) {\\n     return mod289_0(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise_0(vec3 v)\\n  {\\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g_0 = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g_0;\\n  vec3 i1 = min( g_0.xyz, l.zxy );\\n  vec3 i2 = max( g_0.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289_0(i);\\n  vec4 p = permute_0( permute_0( permute_0(\\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1.xy,h.z);\\n  vec3 p3 = vec3(a1.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\\n                                dot(p2,x2), dot(p3,x3) ) );\\n  }\\n\\n//\\n// Description : Array and textureless GLSL 2D simplex noise function.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289_1(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec2 mod289_1(vec2 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec3 permute_1(vec3 x) {\\n  return mod289_1(((x*34.0)+1.0)*x);\\n}\\n\\nfloat snoise_1(vec2 v)\\n  {\\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\\n                      0.024390243902439); // 1.0 / 41.0\\n// First corner\\n  vec2 i  = floor(v + dot(v, C.yy) );\\n  vec2 x0 = v -   i + dot(i, C.xx);\\n\\n// Other corners\\n  vec2 i1;\\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\\n  //i1.y = 1.0 - i1.x;\\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\\n  // x1 = x0 - i1 + 1.0 * C.xx ;\\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\\n  vec4 x12 = x0.xyxy + C.xxzz;\\n  x12.xy -= i1;\\n\\n// Permutations\\n  i = mod289_1(i); // Avoid truncation effects in permutation\\n  vec3 p = permute_1( permute_1( i.y + vec3(0.0, i1.y, 1.0 ))\\n    + i.x + vec3(0.0, i1.x, 1.0 ));\\n\\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\\n  m = m*m ;\\n  m = m*m ;\\n\\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\\n\\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\\n  vec3 h = abs(x) - 0.5;\\n  vec3 ox = floor(x + 0.5);\\n  vec3 a0 = x - ox;\\n\\n// Normalise gradients implicitly by scaling m\\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\n\\n// Compute final noise value at P\\n  vec3 g;\\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\n  return 130.0 * dot(m, g);\\n}\\n\\nhighp float random(vec2 co)\\n{\\n    highp float a = 12.9898;\\n    highp float b = 78.233;\\n    highp float c = 43758.5453;\\n    highp float dt= dot(co.xy ,vec2(a,b));\\n    highp float sn= mod(dt,3.14);\\n    return fract(sin(sn) * c);\\n}\\n\\n// clang-format on\\n\\nvoid main() {\\n  vec3 color;\\n  vec2 grid = floor(uv * resolution / dpi);\\n  vec2 pixel = 1. / resolution;\\n  vec2 pos = (uv + vec2(1.0)) * 0.5;\\n\\n  // pos.x = fract(pos.x + i / max_readings);\\n  vec2 textCoord = vec2(pos.x, 0.5);\\n  //   vec2 textCoord = (uv * vec2(0.5, 0)) + vec2(0.5);\\n\\n  vec4 data = texture2D(data, textCoord);\\n  float v = data.x;\\n  float buckets = resolution.y / 4.;\\n  // discretized\\n  float dV = floor(v * buckets) / buckets;\\n  // float dVLeading = floor(data.a * buckets) / buckets;\\n\\n  float a = 1.0;\\n\\n  //   vec2 pos+= (i*4.)/max_readings;\\n  //   lightness = min(lightness, 1.0);\\n  gl_FragColor = vec4(1., 1., 1.0, 0.5);\\n\\n  //   if (\\n\\n  if (pos.x < n_readings / max_readings && abs(dV - pos.y) < pixel.y * 2.0) {\\n    gl_FragColor = vec4(hsv2rgb(vec3(-0.1 + v * 0.8, 0.5, 0.5)), 1.0);\\n\\n  } else if (abs((i / max_readings) - pos.x) < pixel.x * 4.\\n\\n             && abs(dV - pos.y) < pixel.y * 2.0 && dV > 0.) {\\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n\\n  } else if (abs((pos.y - 0.5) * resolution.y) < 2.0 &&\\n             mod(pos.x * resolution.x, 8.0) > 4.0) {\\n    gl_FragColor = vec4(0., 0., 0., 1.0);\\n  }\\n\\n  //  else {\\n  // }\\n}\"","var map = {\n\t\"./100.ico\": 67,\n\t\"./8ball.ico\": 68,\n\t\"./TV.ico\": 69,\n\t\"./alien2.ico\": 70,\n\t\"./anchor.ico\": 71,\n\t\"./apple.ico\": 72,\n\t\"./armchair.ico\": 73,\n\t\"./ball.ico\": 74,\n\t\"./banana.ico\": 75,\n\t\"./bart.ico\": 76,\n\t\"./baseball.ico\": 77,\n\t\"./bee.ico\": 78,\n\t\"./bone.ico\": 79,\n\t\"./bow.ico\": 80,\n\t\"./bust.ico\": 81,\n\t\"./cactus.ico\": 82,\n\t\"./camera.ico\": 83,\n\t\"./carrot.ico\": 84,\n\t\"./castle.ico\": 85,\n\t\"./castle2.ico\": 86,\n\t\"./caution.ico\": 87,\n\t\"./chair.ico\": 88,\n\t\"./chamomile.ico\": 89,\n\t\"./cherry.ico\": 90,\n\t\"./cherryblossom.ico\": 91,\n\t\"./coin.ico\": 92,\n\t\"./computer.ico\": 93,\n\t\"./controller.ico\": 94,\n\t\"./crown.ico\": 95,\n\t\"./crucifix.ico\": 96,\n\t\"./cube.ico\": 97,\n\t\"./cubeblue.ico\": 98,\n\t\"./cursor.ico\": 99,\n\t\"./dead.ico\": 100,\n\t\"./dice2.ico\": 101,\n\t\"./dinoegg.ico\": 102,\n\t\"./disc.ico\": 103,\n\t\"./dna.ico\": 104,\n\t\"./dollar.ico\": 105,\n\t\"./donut.ico\": 106,\n\t\"./earth.ico\": 107,\n\t\"./egg.ico\": 108,\n\t\"./eiffel.ico\": 109,\n\t\"./elephant.ico\": 110,\n\t\"./eyeball.ico\": 111,\n\t\"./flower.ico\": 112,\n\t\"./folder.ico\": 113,\n\t\"./gameboy.ico\": 114,\n\t\"./gem1.ico\": 115,\n\t\"./gem2.ico\": 116,\n\t\"./glasses3d.ico\": 117,\n\t\"./grave.ico\": 118,\n\t\"./heartPastel.ico\": 119,\n\t\"./heel.ico\": 120,\n\t\"./herb.ico\": 121,\n\t\"./hibiscus.ico\": 122,\n\t\"./horse.ico\": 123,\n\t\"./ipad.ico\": 124,\n\t\"./itunes.ico\": 125,\n\t\"./jasmineflower.ico\": 126,\n\t\"./key.ico\": 127,\n\t\"./keys.ico\": 128,\n\t\"./lemon.ico\": 129,\n\t\"./lighter.ico\": 130,\n\t\"./lips.ico\": 131,\n\t\"./marble.ico\": 132,\n\t\"./mess.ico\": 133,\n\t\"./mic.ico\": 134,\n\t\"./moon.ico\": 135,\n\t\"./mouse.ico\": 136,\n\t\"./mug.ico\": 137,\n\t\"./music.ico\": 138,\n\t\"./nasa.ico\": 139,\n\t\"./nautilus.ico\": 140,\n\t\"./officechair.ico\": 141,\n\t\"./onigiri.ico\": 142,\n\t\"./orb.ico\": 143,\n\t\"./palmtree.ico\": 144,\n\t\"./patrick.ico\": 145,\n\t\"./pawn.ico\": 146,\n\t\"./peach.ico\": 147,\n\t\"./pencil.ico\": 148,\n\t\"./pin.ico\": 149,\n\t\"./pineapple.ico\": 150,\n\t\"./pizza2.ico\": 151,\n\t\"./pokeball.ico\": 152,\n\t\"./pot.ico\": 153,\n\t\"./prideflag.ico\": 154,\n\t\"./ps2.ico\": 155,\n\t\"./pyramid.ico\": 156,\n\t\"./rainbow.ico\": 157,\n\t\"./ring.ico\": 158,\n\t\"./saturn.ico\": 159,\n\t\"./sauron.ico\": 160,\n\t\"./ship.ico\": 161,\n\t\"./sims.ico\": 162,\n\t\"./skull.ico\": 163,\n\t\"./sparkle.ico\": 164,\n\t\"./sparkleheart.ico\": 165,\n\t\"./spinner.ico\": 166,\n\t\"./squash.ico\": 167,\n\t\"./statue.ico\": 168,\n\t\"./sword.ico\": 169,\n\t\"./table.ico\": 170,\n\t\"./tombone.ico\": 171,\n\t\"./tooth.ico\": 172,\n\t\"./trans.ico\": 173,\n\t\"./transfer.ico\": 174,\n\t\"./trophy.ico\": 175,\n\t\"./umbrella.ico\": 176,\n\t\"./vlc.ico\": 177,\n\t\"./volleyball.ico\": 178,\n\t\"./whale.ico\": 179,\n\t\"./word.ico\": 180,\n\t\"./yin-yang.ico\": 181\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 66;","module.exports = __webpack_public_path__ + \"tchotchkes/100.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/8ball.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/TV.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/alien2.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/anchor.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/apple.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/armchair.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/ball.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/banana.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/bart.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/baseball.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/bee.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/bone.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/bow.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/bust.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/cactus.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/camera.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/carrot.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/castle.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/castle2.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/caution.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/chair.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/chamomile.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/cherry.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/cherryblossom.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/coin.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/computer.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/controller.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/crown.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/crucifix.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/cube.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/cubeblue.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/cursor.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/dead.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/dice2.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/dinoegg.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/disc.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/dna.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/dollar.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/donut.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/earth.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/egg.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/eiffel.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/elephant.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/eyeball.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/flower.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/folder.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/gameboy.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/gem1.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/gem2.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/glasses3d.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/grave.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/heartPastel.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/heel.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/herb.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/hibiscus.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/horse.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/ipad.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/itunes.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/jasmineflower.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/key.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/keys.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/lemon.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/lighter.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/lips.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/marble.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/mess.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/mic.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/moon.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/mouse.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/mug.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/music.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/nasa.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/nautilus.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/officechair.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/onigiri.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/orb.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/palmtree.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/patrick.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/pawn.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/peach.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/pencil.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/pin.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/pineapple.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/pizza2.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/pokeball.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/pot.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/prideflag.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/ps2.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/pyramid.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/rainbow.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/ring.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/saturn.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/sauron.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/ship.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/sims.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/skull.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/sparkle.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/sparkleheart.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/spinner.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/squash.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/statue.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/sword.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/table.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/tombone.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/tooth.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/trans.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/transfer.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/trophy.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/umbrella.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/vlc.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/volleyball.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/whale.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/word.ico\";","module.exports = __webpack_public_path__ + \"tchotchkes/yin-yang.ico\";","module.exports = __webpack_public_path__ + \"assets/daphnia2.gif\";","// if (window.safari) {\n//   history.pushState(null, null, location.href);\n//   window.onpopstate = function(event) {\n//     history.go(1);\n//   };\n// }\n\nlet background = document.getElementById(\"background\");\nlet fadeTimout = 1000 * 30;\nlet timeout = window.setTimeout(() => {\n  if (window.UI.state.tutorialProgress > 3) {\n    document.body.classList.add(\"faded\");\n  }\n}, fadeTimout);\n\nlet handleActivity = e => {\n  window.clearTimeout(timeout);\n  document.body.classList.remove(\"faded\");\n  timeout = window.setTimeout(() => {\n    if (window.UI.state.tutorialProgress > 3) {\n      document.body.classList.add(\"faded\");\n    }\n  }, fadeTimout);\n};\ndocument.body.addEventListener(\"mousemove\", handleActivity);\ndocument.body.addEventListener(\"touchstart\", handleActivity);\n\nbackground.addEventListener(\"touchmove\", e => {\n  if (!window.paused) {\n    if (e.cancelable) {\n      e.preventDefault();\n    }\n  }\n});\n\n// if (\"serviceWorker\" in navigator) {\n//   window.addEventListener(\"load\", () => {\n//     navigator.serviceWorker\n//       .register(\"/service-worker.js\")\n//       .then(registration => {\n//         console.log(\"SW registered: \", registration);\n//       })\n//       .catch(registrationError => {\n//         console.log(\"SW registration failed: \", registrationError);\n//       });\n//   });\n// }\n","module.exports = \"#define GLSLIFY 1\\n// clang-format off\\n\\nuniform vec3 iResolution;\\nuniform float iGlobalTime, iTime, gameTime;\\nuniform sampler2D iChannel0;\\n// Appropriated with love & respect from:///\\n// The sun, the sky and the clouds. By StillTravelling\\n// https://www.shadertoy.com/view/tdSXzD\\n// Very much a messy hack sorry!!\\n\\n// Many Thank yous go to the below for their amazing work\\n// Day and night sky cycle. By László Matuska (@BitOfGold)\\n// Creates a sky texture for a skydome\\n// https://www.shadertoy.com/view/ltlSWB\\n\\n// Weather. By David Hoskins, May 2014.\\n// https://www.shadertoy.com/view/4dsXWn\\n\\n// Edge of atmosphere by dmytro rubalskyi (ruba)\\n// https://www.shadertoy.com/view/XlXGzB\\n\\n// Auroras by nimitz\\n// https://www.shadertoy.com/view/XtGGRt\\n\\n// Sorry to those I've missed out!!\\n\\n#define ORIG_CLOUD 0\\n#define ENABLE_RAIN 0 // enable rain drops on screen\\n#define SIMPLE_SUN 0\\n#define NICE_HACK_SUN 1\\n#define SOFT_SUN 1\\n#define cloudy 0.5 // 0.0 clear sky\\n#define haze 0.01 * (cloudy * 20.)\\n#define rainmulti 5.0 // makes clouds thicker\\n#define rainy (10.0 - rainmulti)\\n#define t iTime\\n#define fov tan(radians(60.0))\\n#define S(x, y, z) smoothstep(x, y, z)\\n#define cameraheight 5e1   // 50.\\n#define mincloudheight 5e3 // 5e3\\n#define maxcloudheight 10e3 // 8e3\\n#define xaxiscloud t * 5e2 // t*5e2 +t left -t right *speed\\n#define yaxiscloud 0.      // 0.\\n#define zaxiscloud t * 6e2 // t*6e2 +t away from horizon -t towards horizon *speed\\n#define cloudnoise 2e-4 // 2e-4\\n\\n// clang-format on\\n\\n//#define cloud2\\n\\n// Performance\\nconst int steps = 16;  // 16 is fast, 128 or 256 is extreme high\\nconst int stepss = 16; // 16 is fast, 16 or 32 is high\\n\\n// Environment\\nconst float R0 = 6360e3; // planet radius //6360e3 actual 6371km\\nconst float Ra = 6380e3; // atmosphere radius //6380e3 troposphere 8 to 14.5km\\nconst float I = 10.;     // sun light power, 10.0 is normal\\nconst float SI = 5.;     // sun intensity for sun\\nconst float g = 0.45;    // light concentration .76 //.45 //.6  .45 is normaL\\nconst float g2 = g * g;\\nconst float PI = 3.14159265358979323846;\\nconst float PI2 = 2. * 3.14159265358979323846;\\n\\nconst float ts = (cameraheight / 2.5e5);\\n\\nconst float s = 0.999; // light concentration for sun\\n#if SOFT_SUN\\nconst float s2 = s;\\n#else\\nconst float s2 = s * s;\\n#endif\\nconst float Hr = 8e3;   // Rayleigh scattering top //8e3\\nconst float Hm = 1.2e3; // Mie scattering top //1.3e3\\n\\nvec3 bM = vec3(21e-6); // normal mie // vec3(21e-6)\\n// vec3 bM = vec3(50e-6); //high mie\\n\\n// Rayleigh scattering (sky color, atmospheric up to 8km)\\nvec3 bR = vec3(5.8e-6, 13.5e-6, 33.1e-6); // normal earth\\n// vec3 bR = vec3(5.8e-6, 33.1e-6, 13.5e-6); //purple\\n// vec3 bR = vec3( 63.5e-6, 13.1e-6, 50.8e-6 ); //green\\n// vec3 bR = vec3( 13.5e-6, 23.1e-6, 115.8e-6 ); //yellow\\n// vec3 bR = vec3( 5.5e-6, 15.1e-6, 355.8e-6 ); //yeellow\\n// vec3 bR = vec3(3.5e-6, 333.1e-6, 235.8e-6 ); //red-purple\\n\\nvec3 C = vec3(0., -R0, 0.);             // planet center\\nvec3 Ds = normalize(vec3(0., 0., -1.)); // sun direction?\\n\\nfloat cloudyhigh = 0.05; // if cloud2 defined\\n\\n#if ORIG_CLOUD\\nfloat cloudnear =\\n    1.0; // 9e3 12e3  //do not render too close clouds on the zenith\\nfloat cloudfar = 1e3; // 15e3 17e3\\n#else\\nfloat cloudnear = 1.0; // 15e3 17e3\\nfloat cloudfar = 70e3; // 160e3  //do not render too close clouds on the horizon\\n                       // 160km should be max for cumulus\\n#endif\\n\\n// AURORA STUFF\\nmat2 mm2(in float a) {\\n  float c = cos(a);\\n  float s = sin(a);\\n  return mat2(c, s, -s, c);\\n}\\n\\nmat2 m2 = mat2(0.95534, 0.29552, -0.29552, 0.95534);\\n\\nfloat tri(in float x) { return clamp(abs(fract(x) - .5), 0.01, 0.49); }\\n\\nvec2 tri2(in vec2 p) { return vec2(tri(p.x) + tri(p.y), tri(p.y + tri(p.x))); }\\n\\nfloat triNoise2d(in vec2 p, float spd) {\\n  float z = 1.8;\\n  float z2 = 2.5;\\n  float rz = 0.;\\n  p *= mm2(p.x * 0.06);\\n  vec2 bp = p;\\n  for (float i = 0.; i < 5.; i++) {\\n    vec2 dg = tri2(bp * 1.85) * .75;\\n    dg *= mm2(t * spd);\\n    p -= dg / z2;\\n\\n    bp *= 1.3;\\n    z2 *= 1.45;\\n    z *= .42;\\n    p *= 1.21 + (rz - 1.0) * .02;\\n\\n    rz += tri(p.x + tri(p.y)) * z;\\n    p *= -m2;\\n  }\\n  return clamp(1. / pow(rz * 29., 1.3), 0., .55);\\n}\\n\\nfloat hash21(in vec2 n) {\\n  return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\\n}\\nvec4 aurora(vec3 ro, vec3 rd) {\\n  vec4 col = vec4(0);\\n  vec4 avgCol = vec4(0);\\n  ro *= 1e-5;\\n  float mt = 10.;\\n  for (float i = 0.; i < 5.; i++) {\\n    float of = 0.006 * hash21(gl_FragCoord.xy) * smoothstep(0., 15., i * mt);\\n    float pt = ((.8 + pow((i * mt), 1.2) * .001) - rd.y) / (rd.y * 2. + 0.4);\\n    pt -= of;\\n    vec3 bpos = (ro) + pt * rd;\\n    vec2 p = bpos.zx;\\n    // vec2 p = rd.zx;\\n    float rzt = triNoise2d(p, 0.1);\\n    vec4 col2 = vec4(0, 0, 0, rzt);\\n    col2.rgb =\\n        (sin(1. - vec3(2.15, -.5, 1.2) + (i * mt) * 0.053) * (0.5 * mt)) * rzt;\\n    avgCol = mix(avgCol, col2, .5);\\n    col += avgCol * exp2((-i * mt) * 0.04 - 2.5) * smoothstep(0., 5., i * mt);\\n  }\\n\\n  col *= (clamp(rd.y * 15. + .4, 0., 1.2));\\n  return col * 1.8;\\n}\\n\\n// END AURORA STUFF\\n\\nfloat noise(in vec2 v) {\\n  return 0.5;\\n  //    texture(iChannel0,(v+.5)/256., 0.).r * 0.01;\\n}\\n\\n// by iq\\nfloat Noise(in vec3 x) {\\n  vec3 p = floor(x);\\n  vec3 f = fract(x);\\n  f = f * f * (3.0 - 2.0 * f);\\n\\n  vec2 uv = (p.xy + vec2(37.0, 17.0) * p.z) + f.xy;\\n  vec2 rg = textureLod(iChannel0, (uv + 0.5) / 256.0, -100.0).yx;\\n  return mix(rg.x, rg.y, f.z);\\n}\\n\\nfloat fnoise(vec3 p, in float t) {\\n  p *= .25;\\n  float f;\\n\\n  f = 0.5000 * Noise(p);\\n  p = p * 3.02;\\n  p.y -= t * .1; // t*.05 speed cloud changes\\n  f += 0.2500 * Noise(p);\\n  p = p * 3.03;\\n  p.y += t * .06;\\n  f += 0.1250 * Noise(p);\\n  p = p * 3.01;\\n  f += 0.0625 * Noise(p);\\n  p = p * 3.03;\\n  f += 0.03125 * Noise(p);\\n  p = p * 3.02;\\n  f += 0.015625 * Noise(p);\\n  return f;\\n}\\n\\nfloat cloud(vec3 p, in float t) {\\n  float cld = fnoise(p * cloudnoise, t) + cloudy * 0.1;\\n  cld = smoothstep(.4 + .04, .6 + .04, cld);\\n  cld *= cld * (5.0 * rainmulti);\\n  return cld + haze;\\n}\\n\\nvoid densities(in vec3 pos, out float rayleigh, out float mie) {\\n  float h = length(pos - C) - R0;\\n  rayleigh = exp(-h / Hr);\\n  vec3 d = pos;\\n  d.y = 0.0;\\n  float dist = length(d);\\n\\n  float cld = 0.;\\n  if (mincloudheight < h && h < maxcloudheight) {\\n    // cld = cloud(pos+vec3(t*1e3,0., t*1e3),t)*cloudy;\\n    cld = cloud(pos + vec3(xaxiscloud, yaxiscloud, zaxiscloud), t) *\\n          cloudy; // direction and speed the cloud movers\\n    cld *= sin(3.1415 * (h - mincloudheight) / mincloudheight) * cloudy;\\n  }\\n#ifdef cloud2\\n  float cld2 = 0.;\\n  if (12e3 < h && h < 15.5e3) {\\n    cld2 = fnoise(pos * 3e-4, t) *\\n           cloud(pos * 32.0 + vec3(27612.3, 0., -t * 15e3), t);\\n    cld2 *= sin(3.1413 * (h - 12e3) / 12e3) * cloudyhigh;\\n    cld2 = clamp(cld2, 0.0, 1.0);\\n  }\\n\\n#endif\\n\\n#if ORIG_CLOUD\\n  if (dist < cloudfar) {\\n    float factor =\\n        clamp(1.0 - ((cloudfar - dist) / (cloudfar - cloudnear)), 0.0, 1.0);\\n    cld *= factor;\\n  }\\n#else\\n\\n  if (dist > cloudfar) {\\n\\n    float factor =\\n        clamp(1.0 - ((dist - cloudfar) / (cloudfar - cloudnear)), 0.0, 1.0);\\n    cld *= factor;\\n  }\\n#endif\\n\\n  mie = exp(-h / Hm) + cld + haze;\\n#ifdef cloud2\\n  mie += cld2;\\n#endif\\n}\\n\\nfloat escape(in vec3 p, in vec3 d, in float R) {\\n  vec3 v = p - C;\\n  float b = dot(v, d);\\n  float c = dot(v, v) - R * R;\\n  float det2 = b * b - c;\\n  if (det2 < 0.)\\n    return -1.;\\n  float det = sqrt(det2);\\n  float t1 = -b - det, t2 = -b + det;\\n  return (t1 >= 0.) ? t1 : t2;\\n}\\n\\n// this can be explained:\\n// http://www.scratchapixel.com/lessons/3d-advanced-lessons/simulating-the-colors-of-the-sky/atmospheric-scattering/\\nvoid scatter(vec3 o, vec3 d, out vec3 col, out vec3 scat, in float t) {\\n\\n  float L = escape(o, d, Ra);\\n  float mu = dot(d, Ds);\\n  float opmu2 = 1. + mu * mu;\\n  float phaseR = .0596831 * opmu2;\\n  float phaseM = .1193662 * (1. - g2) * opmu2 /\\n                 ((2. + g2) * pow(1. + g2 - 2. * g * mu, 1.5));\\n  float phaseS = .1193662 * (1. - s2) * opmu2 /\\n                 ((2. + s2) * pow(1. + s2 - 2. * s * mu, 1.5));\\n\\n  float depthR = 0., depthM = 0.;\\n  vec3 R = vec3(0.), M = vec3(0.);\\n\\n  float dl = L / float(steps);\\n  for (int i = 0; i < steps; ++i) {\\n    float l = float(i) * dl;\\n    vec3 p = (o + d * l);\\n\\n    float dR, dM;\\n    densities(p, dR, dM);\\n    dR *= dl;\\n    dM *= dl;\\n    depthR += dR;\\n    depthM += dM;\\n\\n    float Ls = escape(p, Ds, Ra);\\n    if (Ls > 0.) {\\n      float dls = Ls / float(stepss);\\n      float depthRs = 0., depthMs = 0.;\\n      for (int j = 0; j < stepss; ++j) {\\n        float ls = float(j) * dls;\\n        vec3 ps = (p + Ds * ls);\\n        float dRs, dMs;\\n        densities(ps, dRs, dMs);\\n        depthRs += dRs * dls;\\n        depthMs += dMs * dls;\\n      }\\n\\n      vec3 A = exp(-(bR * (depthRs + depthR) + bM * (depthMs + depthM)));\\n      R += (A * dR);\\n      M += A * dM;\\n    } else {\\n    }\\n  }\\n\\n  // col = (I) * (R * bR * phaseR + M * bM * (phaseM ));\\n  col = (I) * (M * bM * (phaseM)); // Mie scattering\\n#if NICE_HACK_SUN\\n  col += (SI) * (M * bM * phaseS); // Sun\\n#endif\\n  col += (I) * (R * bR * phaseR); // Rayleigh scattering\\n  scat = 0.1 * (bM * depthM);\\n  // scat = 0.0 + clamp(depthM*5e-7,0.,1.);\\n}\\n\\nvec3 hash33(vec3 p) {\\n  p = fract(p * vec3(443.8975, 397.2973, 491.1871));\\n  p += dot(p.zxy, p.yxz + 19.27);\\n  return fract(vec3(p.x * p.y, p.z * p.x, p.y * p.z));\\n}\\n\\nvec3 stars(in vec3 p) {\\n  vec3 c = vec3(0.);\\n  float res = iResolution.x * 2.5;\\n\\n  for (float i = 0.; i < 4.; i++) {\\n    vec3 q = fract(p * (.15 * res)) - 0.5;\\n    vec3 id = floor(p * (.15 * res));\\n    vec2 rn = hash33(id).xy;\\n    float c2 = 1. - smoothstep(0., .6, length(q));\\n    c2 *= step(rn.x, .0005 + i * i * 0.001);\\n    c +=\\n        c2 * (mix(vec3(1.0, 0.49, 0.1), vec3(0.75, 0.9, 1.), rn.y) * 0.1 + 0.9);\\n    p *= 1.3;\\n  }\\n  return c * c * .8;\\n}\\n\\n// SIMPLE SUN STUFF\\nconst float density = 0.5;\\nconst float zenithOffset = 0.48;\\nconst vec3 skyColor = vec3(0.37, 0.55, 1.0) * (1.0 + 0.0);\\n\\n#define zenithDensity(x) density / pow(max(x - zenithOffset, 0.0035), 0.75)\\n\\nfloat getSunPoint(vec2 p, vec2 lp) {\\n  return smoothstep(0.04 * (fov / 2.0), 0.026 * (fov / 2.0), distance(p, lp)) *\\n         50.0;\\n}\\n\\nfloat getMie(vec2 p, vec2 lp) {\\n  float mytest = lp.y < 0.5 ? (lp.y + 0.5) * pow(0.05, 20.0) : 0.05;\\n  float disk = clamp(1.0 - pow(distance(p, lp), mytest), 0.0, 1.0);\\n  return disk * disk * (3.0 - 2.0 * disk) * 0.25 * PI;\\n}\\n\\nvec3 getSkyAbsorption(vec3 x, float y) {\\n  vec3 absorption = x * y;\\n  absorption = pow(absorption, 1.0 - (y + absorption) * 0.5) / x / y;\\n  return absorption;\\n}\\n\\nvec3 jodieReinhardTonemap(vec3 c) {\\n  float l = dot(c, vec3(0.2126, 0.7152, 0.0722));\\n  vec3 tc = c / (c + 1.0);\\n  return mix(c / (l + 1.0), tc, tc);\\n}\\n\\nvec3 getAtmosphericScattering(vec2 p, vec2 lp) {\\n  float zenithnew = zenithDensity(p.y);\\n  float sunPointDistMult =\\n      clamp(length(max(lp.y + 0.1 - zenithOffset, 0.0)), 0.0, 1.0);\\n  vec3 absorption = getSkyAbsorption(skyColor, zenithnew);\\n  vec3 sunAbsorption = getSkyAbsorption(skyColor, zenithDensity(lp.y + 0.1));\\n  vec3 sun3 = getSunPoint(p, lp) * absorption;\\n  vec3 mie2 = getMie(p, lp) * sunAbsorption;\\n  vec3 totalSky = sun3; //+ mie2;\\n  totalSky *= sunAbsorption * 0.5 + 0.5 * length(sunAbsorption);\\n  vec3 newSky = jodieReinhardTonemap(totalSky);\\n  return newSky;\\n}\\n// END SIMPLE SUN STUFF\\n\\n// RAIN STUFF\\nvec3 N31(float p) {\\n  //  3 out, 1 in... DAVE HOSKINS\\n  vec3 p3 = fract(vec3(p) * vec3(.1031, .11369, .13787));\\n  p3 += dot(p3, p3.yzx + 19.19);\\n  return fract(\\n      vec3((p3.x + p3.y) * p3.z, (p3.x + p3.z) * p3.y, (p3.y + p3.z) * p3.x));\\n}\\n\\nfloat SawTooth(float t) {\\n  return cos(t + cos(t)) + sin(2. * t) * .2 + sin(4. * t) * .02;\\n}\\n\\nfloat DeltaSawTooth(float t) {\\n  return 0.4 * cos(2. * t) + 0.08 * cos(4. * t) -\\n         (1. - sin(t)) * sin(t + cos(t));\\n}\\n\\nvec2 GetDrops(vec2 uv, float seed, float m) {\\n\\n  float t2 = t + m;\\n  vec2 o = vec2(0.);\\n\\n#ifndef DROP_DEBUG\\n  uv.y += t2 * .05;\\n#endif\\n\\n  uv *= vec2(10., 2.5) * 2.;\\n  vec2 id = floor(uv);\\n  vec3 n = N31(id.x + (id.y + seed) * 546.3524);\\n  vec2 bd = fract(uv);\\n\\n  vec2 uv2 = bd;\\n\\n  bd -= 0.5;\\n\\n  bd.y *= 4.;\\n\\n  bd.x += (n.x - .5) * rainy;\\n\\n  t2 += n.z * 6.28;\\n  float slide = SawTooth(t2);\\n\\n  float ts = 1.5;\\n  vec2 trailPos = vec2(bd.x * ts, (fract(bd.y * ts * 2. - t2 * 2.) - .5) * .5);\\n\\n  bd.y += slide * 2.; // make drops slide down\\n\\n#ifdef HIGH_QUALITY\\n  float dropShape = bd.x * bd.x;\\n  dropShape *= DeltaSawTooth(t);\\n  bd.y += dropShape; // change shape of drop when it is falling\\n#endif\\n\\n  float d = length(bd); // distance to main drop\\n\\n  float trailMask = S(-.2, .2, bd.y); // mask out drops that are below the main\\n  trailMask *= bd.y;                  // fade dropsize\\n  float td = length(trailPos * max(.5, trailMask)); // distance to trail drops\\n\\n  float mainDrop = S(.2, .1, d);\\n  float dropTrail = S(.1, .02, td);\\n\\n  dropTrail *= trailMask;\\n  o = mix(bd * mainDrop, trailPos, dropTrail); // mix main drop and drop trail\\n\\n#ifdef DROP_DEBUG\\n  if (uv2.x < .02 || uv2.y < .01)\\n    o = vec2(1.);\\n#endif\\n\\n  return o;\\n}\\n// END RAIN STUFF\\n\\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\\n\\n  float AR = iResolution.x / iResolution.y;\\n  //   float YAR = iResolution.y / iResolution.x;\\n  //   float SAR = min(AR, YAR);\\n  //   float BAR = max(AR, YAR);\\n  //   float smallSide = min(iResolution.x, iResolution.y);\\n  //   float bigSide = max(iResolution.x, iResolution.y);\\n  float M = 1.0; // canvas.innerWidth/M //canvas.innerHeight/M --res\\n  vec2 sunPos = vec2(sin(-gameTime * PI2), cos(gameTime * PI2)) * 0.5;\\n  sunPos.x += AR * 0.5;\\n  if (sunPos.y < 0.) {\\n    sunPos.y = sunPos.y / 4.;\\n  }\\n  sunPos.y += 0.5;\\n\\n  // circle = vec2(sin(gameTime*PI2));\\n  vec2 uvMouse = sunPos;\\n  // / iResolution.xy);\\n  // uvMouse.x *= AR;\\n\\n  vec2 uv0 = (fragCoord.xy / iResolution.xy);\\n  uv0 *= M;\\n  // uv0.x *= AR;\\n\\n  vec2 uv = uv0 * (2.0 * M) - (1.0 * M);\\n  uv.x *= AR;\\n\\n  // uvMouse.y=(0.7-(0.05*fov)); //initial view\\n  // uvMouse.x=(1.0-(0.05*fov)); //initial view\\n  // circle+=0.5;\\n  // uvMouse.xy = circle - vec2((0.05*fov));\\n  // uvMouse.xy = vec2(1.0, 0.5);\\n  // uvMouse*= 100.;\\n  // uvMouse += iResolution.xy *0.5;\\n  Ds = normalize(vec3(uvMouse.x - ((0.5 * AR)), uvMouse.y - 0.5, (fov / -2.0)));\\n\\n  vec3 O = vec3(0., cameraheight, 0.);\\n  vec3 D = normalize(vec3(uv, -(fov * M)));\\n\\n  vec3 color = vec3(0.);\\n  vec3 scat = vec3(0.);\\n\\n  // float scat = 0.;\\n  float att = 1.;\\n  float staratt = 1.;\\n  float scatatt = 1.;\\n  vec3 star = vec3(0.);\\n  vec4 aur = vec4(0.);\\n\\n  float fade = smoothstep(0., 0.01, abs(D.y)) * 0.5 + 0.6;\\n\\n  staratt = 1. - min(1.0, (uvMouse.y * 2.0));\\n  scatatt = 1. - min(1.0, (uvMouse.y * 2.2));\\n\\n  if (D.y < -ts) {\\n    float L = -O.y / D.y;\\n    O = O + D * L;\\n    D.y = -D.y;\\n    D = normalize(\\n        D +\\n        vec3(0, .003 * sin(t + 6.2831 * noise(O.xz + vec2(0., -t * 1e3))), 0.));\\n    att = .6;\\n    star = stars(D);\\n    uvMouse.y < 0.5 ? aur = smoothstep(0.0, 2.5, aurora(O, D)) : aur = aur;\\n  } else {\\n    float L1 = O.y / D.y;\\n    vec3 O1 = O + D * L1;\\n\\n    vec3 D1 = vec3(1.);\\n    D1 = normalize(\\n        D + vec3(1.,\\n                 0.0009 * sin(t + 6.2831 * noise(O1.xz + vec2(0., t * 0.8))),\\n                 0.));\\n    star = stars(D1);\\n    uvMouse.y < 0.5 ? aur = smoothstep(0., 1.5, aurora(O, D)) *fade : aur = aur;\\n  }\\n\\n  star *= att;\\n  star *= staratt;\\n\\n  scatter(O, D, color, scat, t);\\n  color *= att;\\n  scat *= att;\\n  scat *= scatatt;\\n\\n// draw the badly implemented sun\\n#if SIMPLE_SUN\\n\\n  vec2 uv1 = (fragCoord.xy / iResolution.xy);\\n  uv1 *= M;\\n  uv1.x *= AR;\\n\\n  vec3 sun2 = getAtmosphericScattering(uv1, vec2(uvMouse.x, uvMouse.y));\\n  color += sun2;\\n#endif\\n\\n  color += scat;\\n  color += star;\\n  //   color=color*(1.-(aur.a)*scatatt) + (aur.rgb*scatatt);\\n  color += aur.rgb * scatatt;\\n\\n#if ENABLE_RAIN\\n  vec2 drops = vec2(0.);\\n  if (rainmulti > 1.0) {\\n    drops = GetDrops(uv / 2.0, 1., 1.);\\n\\n    color += drops.x + drops.y;\\n  }\\n#endif\\n\\n  // float env = pow( smoothstep(.5, iResolution.x / iResolution.y,\\n  // length(uv*0.8)), 0.0);\\n  fragColor = vec4(pow(color, vec3(1.0 / 2.2)), 1.); // gamma correct\\n}\\nvoid main() {\\n  vec4 color = vec4(0.0);\\n  mainImage(color, gl_FragCoord.xy);\\n  gl_FragColor = color;\\n}\\n\""],"sourceRoot":""}